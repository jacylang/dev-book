"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[3230],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),l=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return o.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},d=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||a;return n?o.createElement(f,i(i({ref:t},p),{},{components:n})):o.createElement(f,i({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<a;l++)i[l]=n[l];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}d.displayName="MDXCreateElement"},6781:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return p},default:function(){return d}});var o=n(7462),r=n(3366),a=(n(7294),n(3905)),i=["components"],s={},c="Semicolons",l={unversionedId:"particles/syntax-decisions/semicolons",id:"particles/syntax-decisions/semicolons",isDocsHomePage:!1,title:"Semicolons",description:"I've made a bad decision to make all ; optional at the start of development.",source:"@site/docs/particles/syntax-decisions/semicolons.md",sourceDirName:"particles/syntax-decisions",slug:"/particles/syntax-decisions/semicolons",permalink:"/dev-book/docs/particles/syntax-decisions/semicolons",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/particles/syntax-decisions/semicolons.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Range Operators",permalink:"/dev-book/docs/particles/syntax-decisions/range-operators"},next:{title:"Variables",permalink:"/dev-book/docs/particles/syntax-decisions/variables"}},p=[],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"semicolons"},"Semicolons"),(0,a.kt)("p",null,"I've made a bad decision to make all ",(0,a.kt)("inlineCode",{parentName:"p"},";")," optional at the start of development."),(0,a.kt)("p",null,"Now, ",(0,a.kt)("inlineCode",{parentName:"p"},";")," is required, anyway, I won't add rules about ",(0,a.kt)("inlineCode",{parentName:"p"},";")," like Rust does. In Rust, if you place a semicolon at the end\nof expression-statement, it is treated as return-expression or the value of the block. In Jacy there won't be any rules\nlike that, for control-flow structure blocks the last expression is always the value of the block and in functions\nexplicit ",(0,a.kt)("inlineCode",{parentName:"p"},"return")," is always required if block (","`","{}","`",") syntax is used."),(0,a.kt)("p",null,'I\'ve promised myself to add "semicolon inference" in the future, so I cannot rely on semicolon as part of any additional\nrules except the only one -- using as a terminating token.'),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'The important thing is that I won\'t implement "semicolon insertion", because syntax is too complex to reduce all cases\nto hard rules.'),(0,a.kt)("p",{parentName:"blockquote"},"What I'm gonna do is check for NLs in each place where they can be optional and also use them as alternative to ",(0,a.kt)("inlineCode",{parentName:"p"},";"))),(0,a.kt)("p",null,"Resources:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://pling.jondgoodwin.com/post/semicolon-inference/"},"Semicolon Inference"))))}d.isMDXComponent=!0}}]);