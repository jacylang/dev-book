"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[4229],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(r),d=a,f=m["".concat(l,".").concat(d)]||m[d]||u[d]||o;return r?n.createElement(f,s(s({ref:t},p),{},{components:r})):n.createElement(f,s({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var c=2;c<o;c++)s[c]=r[c];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},95420:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),s=["components"],i={},l="Arguments placement rules",c={unversionedId:"particles/params-args-matching",id:"particles/params-args-matching",isDocsHomePage:!1,title:"Arguments placement rules",description:"Jacy supports named arguments, also default parameters values, thus we need some rules to establish the process of placement arguments at the needed positions.",source:"@site/docs/particles/params-args-matching.md",sourceDirName:"particles",slug:"/particles/params-args-matching",permalink:"/dev-book/docs/particles/params-args-matching",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/particles/params-args-matching.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Organic _Jacy_",permalink:"/dev-book/docs/particles/organic-jacy"},next:{title:"References and move semantics",permalink:"/dev-book/docs/particles/refs-&-moves"}},p=[],u={toc:p};function m(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"arguments-placement-rules"},"Arguments placement rules"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Jacy")," supports named arguments, also default parameters values, thus we need some rules to establish the process of placement arguments at the needed positions."),(0,o.kt)("p",null,"Let's begin with an example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jc"},"func foo(first: i32, label second: i32, third: i32 = 123);\n")),(0,o.kt)("p",null,"(",(0,o.kt)("inlineCode",{parentName:"p"},"label")," is not required, it's just an example, and without it, we could use ",(0,o.kt)("inlineCode",{parentName:"p"},"labeled")," name as argument name)"),(0,o.kt)("p",null,"We can call this function in some different ways:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jc"},"foo(123, 123, 123); // just in order parameters placed\nfoo(first: 123, second: 123, third: 123); // all named\nfoo(first: 123, 123, 123); // some named\n")),(0,o.kt)("p",null,"All of these calls are equivalent and intuitive. But what if we violate the order of parameters placed in signature, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jc"},"foo(123, 123, first: 123);\n")),(0,o.kt)("p",null,"Here, we come up with a first rule: labeled parameters are just ignored in the process of placing arguments by order. Pretty simple, we just see that ",(0,o.kt)("inlineCode",{parentName:"p"},"first")," is already used as a labeled argument thus we start from the ",(0,o.kt)("inlineCode",{parentName:"p"},"second"),"."))}m.isMDXComponent=!0}}]);