"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[4488],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(k,i(i({ref:t},s),{},{components:n})):r.createElement(k,i({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},39433:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={},p="Optional Chaining and the Try operator",c={unversionedId:"particles/optional-chaining-&-try",id:"particles/optional-chaining-&-try",isDocsHomePage:!1,title:"Optional Chaining and the Try operator",description:"I want to have them all: optional-chaining, unwrap and try operators.",source:"@site/docs/particles/optional-chaining-&-try.md",sourceDirName:"particles",slug:"/particles/optional-chaining-&-try",permalink:"/dev-book/docs/particles/optional-chaining-&-try",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/particles/optional-chaining-&-try.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Null coalesce",permalink:"/dev-book/docs/particles/null-coalesce"},next:{title:"Organic _Jacy_",permalink:"/dev-book/docs/particles/organic-jacy"}},s=[{value:"Initials",id:"initials",children:[],level:2}],u={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"optional-chaining-and-the-try-operator"},"Optional Chaining and the Try operator"),(0,o.kt)("p",null,"I want to have them all: optional-chaining, unwrap and try operators.\n",(0,o.kt)("strong",{parentName:"p"},"Rust")," includes try operator ",(0,o.kt)("inlineCode",{parentName:"p"},"?")," which is transformed into construction with ",(0,o.kt)("inlineCode",{parentName:"p"},"return"),' on "fail" case, though it is possible to use ',(0,o.kt)("inlineCode",{parentName:"p"},"and_then")," as alternative to JS/C# ",(0,o.kt)("inlineCode",{parentName:"p"},"?.")," operator (optional chaining).\nThe other thing is that ",(0,o.kt)("em",{parentName:"p"},"Jacy")," does not have same syntax for macros as ",(0,o.kt)("strong",{parentName:"p"},"Rust")," because ",(0,o.kt)("inlineCode",{parentName:"p"},"!"),' is reserved as postfix "unwrap" operator, thus expression like ',(0,o.kt)("inlineCode",{parentName:"p"},"foo!(...)")," is ",(0,o.kt)("inlineCode",{parentName:"p"},"std::ops::Unwrap(foo)(...)")," but not ",(0,o.kt)("inlineCode",{parentName:"p"},"foo!(...)")," macro call.\nBy the way, it is possible to both use macros syntax with ",(0,o.kt)("inlineCode",{parentName:"p"},"!")," and have ",(0,o.kt)("inlineCode",{parentName:"p"},"!")," as postfix operator -- store macros in the values namespace (i.e. name ",(0,o.kt)("inlineCode",{parentName:"p"},"foo!")," will collide with e.g. function ",(0,o.kt)("inlineCode",{parentName:"p"},"foo"),"), but I don't like this solution."),(0,o.kt)("p",null,"The other problem is that if we have ",(0,o.kt)("inlineCode",{parentName:"p"},"?"),' as optional chaining, how do we use "try" operator? (',(0,o.kt)("inlineCode",{parentName:"p"},"?")," in ",(0,o.kt)("strong",{parentName:"p"},"Rust"),")."),(0,o.kt)("h2",{id:"initials"},"Initials"),(0,o.kt)("p",null,"I'd like to describe all the possible operators/ways to implement I see."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Operator"),(0,o.kt)("th",{parentName:"tr",align:null},"Possible usage"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"?")," operator"),(0,o.kt)("td",{parentName:"tr",align:null},"Optional chaining / Try operator")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"?.")," distinct operator (",(0,o.kt)("inlineCode",{parentName:"td"},".")," is included in ",(0,o.kt)("inlineCode",{parentName:"td"},"?."),")"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"!")," operator"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"&.")," operator from Ruby (optional chaining, aka safe navigation)"),(0,o.kt)("td",{parentName:"tr",align:null})),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"??")),(0,o.kt)("td",{parentName:"tr",align:null},"I")))))}d.isMDXComponent=!0}}]);