"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[6278],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var o=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,i=function(e,t){if(null==e)return{};var n,o,i={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=o.createContext({}),c=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),f=i,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||r;return n?o.createElement(m,a(a({ref:t},p),{},{components:n})):o.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,a=new Array(r);a[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,a[1]=l;for(var c=2;c<r;c++)a[c]=n[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3484:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return u}});var o=n(7462),i=n(3366),r=(n(7294),n(3905)),a=["components"],l={},s="Config & CLI [OUTDATED]",c={unversionedId:"code-docs/config-and-cli",id:"code-docs/config-and-cli",isDocsHomePage:!1,title:"Config & CLI [OUTDATED]",description:"Config is a common singleton class that converts CLI options to programmer-friendly structures (enums almost",source:"@site/docs/code-docs/config-and-cli.md",sourceDirName:"code-docs",slug:"/code-docs/config-and-cli",permalink:"/dev-book/docs/code-docs/config-and-cli",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/code-docs/config-and-cli.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Syntax Highlighting",permalink:"/dev-book/docs/code-docs/messages/syntax-highlighting"},next:{title:"Dev Conventions",permalink:"/dev-book/docs/code-docs/dev-conventions"}},p=[{value:"Options",id:"options",children:[],level:2},{value:"CLI",id:"cli",children:[],level:2},{value:"Config",id:"config",children:[],level:2}],d={toc:p};function u(e){var t=e.components,n=(0,i.Z)(e,a);return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"config--cli-outdated"},"Config & CLI ","[OUTDATED]"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"Config")," is a common singleton class that converts CLI options to programmer-friendly structures (",(0,r.kt)("inlineCode",{parentName:"p"},"enum"),"s almost\nalways)."),(0,r.kt)("p",null,"You can get",(0,r.kt)("inlineCode",{parentName:"p"},"Config")," via ",(0,r.kt)("inlineCode",{parentName:"p"},"getInstance")," static method, all its properties are global."),(0,r.kt)("h2",{id:"options"},"Options"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cli::Options")," is a structure that contains all info about CLI options: existent boolean and key-value options, allowed\nsource file extensions, options dependencies, etc."),(0,r.kt)("p",null,"Also, ",(0,r.kt)("inlineCode",{parentName:"p"},"cli::Options")," acts as a storage for specified CLI options."),(0,r.kt)("h2",{id:"cli"},"CLI"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"cli::CLI")," is a class that processes input ",(0,r.kt)("inlineCode",{parentName:"p"},"argv")," and produces separate collections of boolean and key-value options. At\nthis step, options are stored as strings. ",(0,r.kt)("inlineCode",{parentName:"p"},"cli::CLI")," class has an interface to work with options to check that something\nspecified or to find if some value passed to a key-value option."),(0,r.kt)("p",null,"To simplify ",(0,r.kt)("inlineCode",{parentName:"p"},"argv")," processing we don't actually walk through all of them. At first, we split them into a vector of\nstring by delimiters like ",(0,r.kt)("inlineCode",{parentName:"p"},"=")," (actually, options are already delimited by white space). By doing so we don't need to\nworry about cases when a user writes ",(0,r.kt)("inlineCode",{parentName:"p"},"-print = all")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-print= all")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"-print =all")," -- all these variants result to\n",(0,r.kt)("inlineCode",{parentName:"p"},'["-print", "=", "all"]'),"."),(0,r.kt)("h2",{id:"config"},"Config"),(0,r.kt)("p",null,"After all the options are collected we can set configurations. It's done in a pretty simple way -- all the argument\nnames are stored in maps with corresponding enum variants. We just need to check if some option is specified and if it\nis we set the option in ",(0,r.kt)("inlineCode",{parentName:"p"},"Config"),"."),(0,r.kt)("p",null,"It is important to note that all default values for options inside ",(0,r.kt)("inlineCode",{parentName:"p"},"Config")," must be set in place, that is, inited like\n",(0,r.kt)("inlineCode",{parentName:"p"},"PrintKind printKind{PrintKind::None}"),"."))}u.isMDXComponent=!0}}]);