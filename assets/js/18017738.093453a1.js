"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[5024],{3905:function(e,t,n){n.d(t,{Zo:function(){return d},kt:function(){return c}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),m=s(n),c=o,k=m["".concat(p,".").concat(c)]||m[c]||u[c]||r;return n?a.createElement(k,i(i({ref:t},d),{},{components:n})):a.createElement(k,i({ref:t},d))}));function c(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8580:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return d},default:function(){return m}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],l={},p="Custom Operators",s={unversionedId:"particles/custom-operators",id:"particles/custom-operators",isDocsHomePage:!1,title:"Custom Operators",description:"There are three ways I see:",source:"@site/docs/particles/custom-operators.md",sourceDirName:"particles",slug:"/particles/custom-operators",permalink:"/dev-book/docs/particles/custom-operators",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/particles/custom-operators.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Custom Allocators",permalink:"/dev-book/docs/particles/custom-allocators"},next:{title:"Function types & names",permalink:"/dev-book/docs/particles/function-type-&-names"}},d=[{value:"Full customization",id:"full-customization",children:[],level:2},{value:"Operators sets",id:"operators-sets",children:[],level:2},{value:"Specs",id:"specs",children:[{value:"What do we need?",id:"what-do-we-need",children:[{value:"AST transformations",id:"ast-transformations",children:[],level:4},{value:"Syntax",id:"syntax",children:[],level:4}],level:3},{value:"Reserved operators (non-overloadable)",id:"reserved-operators-non-overloadable",children:[],level:3},{value:"Trait-operators",id:"trait-operators",children:[{value:"Nullable-operators",id:"nullable-operators",children:[],level:4}],level:3},{value:"Lexing",id:"lexing",children:[{value:"Problems to solve",id:"problems-to-solve",children:[{value:"Generic params problem",id:"generic-params-problem",children:[],level:5},{value:"Function overloading",id:"function-overloading",children:[],level:5}],level:4}],level:3}],level:2}],u={toc:d};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"custom-operators"},"Custom Operators"),(0,r.kt)("p",null,"There are three ways I see:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Do nothing \ud83d\ude10"),(0,r.kt)("li",{parentName:"ol"},"Fully customizable operators such as what Swift does"),(0,r.kt)("li",{parentName:"ol"},"Operator sets")),(0,r.kt)("p",null,"Skipping the first option let's talk about 1. and 2."),(0,r.kt)("h2",{id:"full-customization"},"Full customization"),(0,r.kt)("p",null,"Pros:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"User can define any operator (s)he wants (nice for math)")),(0,r.kt)("p",null,"Cons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Highly increases lexing and parsing"),(0,r.kt)("li",{parentName:"ul"},"Possibly makes parsing context-dependent (I don't respect it)"),(0,r.kt)("li",{parentName:"ul"},"Or, instead of context-dependent parsing we need AST transformations"),(0,r.kt)("li",{parentName:"ul"},"Requires special")),(0,r.kt)("h2",{id:"operators-sets"},"Operators sets"),(0,r.kt)("p",null,"This conception might be not popular, as I've never seen an idea like that. Anyway, for me, it sounds not really weird."),(0,r.kt)("p",null,"The idea is not to allow creating custom operators, but instead allow to use one of predefined. This, predefined operators are not common and should not be used in std, instead, the user is free to use them in a library."),(0,r.kt)("p",null,"Pros:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"No additional complexity in parsing"),(0,r.kt)("li",{parentName:"ul"},"More specific practices of usage"),(0,r.kt)("li",{parentName:"ul"},"Don't need DSL")),(0,r.kt)("p",null,"Cons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Static precedence (predefined operators cannot change precedence)"),(0,r.kt)("li",{parentName:"ul"},'Worse for "primary" ',(0,r.kt)("em",{parentName:"li"},"Jacy"))),(0,r.kt)("h2",{id:"specs"},"Specs"),(0,r.kt)("p",null,"This is the specification proposed for the second way -- fully customizable operators. Operator sets do not need any specification as they just use the common way with traits and implementations."),(0,r.kt)("h3",{id:"what-do-we-need"},"What do we need?"),(0,r.kt)("p",null,"To prepare the compiler for custom operators we need to establish some things required for it."),(0,r.kt)("p",null,"From the view of syntax we need:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Literal tokens or a solution to tokenize operators"),(0,r.kt)("li",{parentName:"ul"},"Syntax for operator information description")),(0,r.kt)("p",null,"From the view of working with AST:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"AST transformations to unflatten operators")),(0,r.kt)("h4",{id:"ast-transformations"},"AST transformations"),(0,r.kt)("p",null,"I see two ways to solve the problem of lack of information about operators at the parsing stage:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Require user to write operator declarations before usage and make parsing context-dependent"),(0,r.kt)("li",{parentName:"ol"},"Make operator declarations items and transform AST right after parsing")),(0,r.kt)("p",null,"Why not 1. way? - I don't want to make new C or C++, requiring the user to declare everything before use to disambiguate parsing, etc.\nOperator declarations must be the same as function, struct, ... declarations -- in ",(0,r.kt)("em",{parentName:"p"},"Jacy"),' they called "items".\nBefore name resolution, all items are declared, it allows the compiler to resolve items that haven\'t appear in code so far.\nI consider making operator declarations items as a good solution.'),(0,r.kt)("h4",{id:"syntax"},"Syntax"),(0,r.kt)("p",null,"For now, I propose this syntax:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jc"},"// Operator type declaration\noperator type Assignment {\n    higherThan: Pipe\n    lowerThan: Additive\n    associativity: left\n}\n\n// Operator declaration\ninfix operator `\xd7=`: Assignment;\n\nstruct S {\n    field: int\n\n    mut func `\xd7=`(rhs: &Self): &mut self {\n        self.field *= rhs.field\n        return self\n    }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"operator type")," pair is used to reduce the count of keywords against Swift solution with ",(0,r.kt)("inlineCode",{parentName:"p"},"precedencegroup"),".\n",(0,r.kt)("inlineCode",{parentName:"p"},"operator")," might be a soft keyword in the future, anyway as all of the keywords, for now, it gonna be a hard keyword."),(0,r.kt)("h3",{id:"reserved-operators-non-overloadable"},"Reserved operators (non-overloadable)"),(0,r.kt)("p",null,"Some operators are inexpressible with code as they require more complex internal transformations.\nE.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"|>")," operator passes lhs to rhs (function) -- we can someway implement this behavior but it won't be extensible as if we would like to add placeholders like ",(0,r.kt)("inlineCode",{parentName:"p"},"a |> b(_, 123)")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," is passed instead of ",(0,r.kt)("inlineCode",{parentName:"p"},"_"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Reserved operators cannot be overloaded or used as function name"))),(0,r.kt)("p",null,"Reserved operators:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"=")," - Raw assignment is always per-byte copy operation"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"|>")," - Transforms AST, that is it is a syntax sugar"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"or"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"and")," - These logic operators are short circuit, thus cannot be overloaded without lazy evaluation (no lazy in ",(0,r.kt)("em",{parentName:"li"},"Jacy")," so far)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"...")," - Spread operator is not a real operator (maybe it will be changed in the future), it is mostly a punctuation sign with different behavior depending on context.")),(0,r.kt)("p",null,"Reserved operators also include special cases described in ","[Lexing]"," part below, these are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"<")," (as prefix)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},">")," (as postfix)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"&")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"*")," (as prefix)"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"?")," (as prefix, infix and postfix)"),(0,r.kt)("li",{parentName:"ul"},"and punctuations ",(0,r.kt)("inlineCode",{parentName:"li"},"//"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"/*"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"*/")," for comments, etc.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Punctuations are recognized on lexing level, thus a user won't get an operator at all.\nFor example, if code is such as ",(0,r.kt)("inlineCode",{parentName:"p"},"func /**/()")," the error would be like ",(0,r.kt)("inlineCode",{parentName:"p"},"Expected function name"),"\nrather than ",(0,r.kt)("inlineCode",{parentName:"p"},"Cannot use /**/ as custom operator")," as comments are processed before and ignored.")),(0,r.kt)("h3",{id:"trait-operators"},"Trait-operators"),(0,r.kt)("p",null,"Trait operators are overloadable operators with syntax inexpressible as prefix, infix or postfix operators, e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"()")," for invocations. Of course, we would allow writing something like ",(0,r.kt)("inlineCode",{parentName:"p"},"func ()() {}"),", but we've got a rule: \"All operators that are written as identifiers (such as in ",(0,r.kt)("inlineCode",{parentName:"p"},"func +")," where ",(0,r.kt)("inlineCode",{parentName:"p"},"+")," is an ident-like) -- are customized if not reserved\", thus there're no special case: you can overload ",(0,r.kt)("inlineCode",{parentName:"p"},"func ()()")," but cannot define ",(0,r.kt)("inlineCode",{parentName:"p"},"postfix operator ()"),"."),(0,r.kt)("p",null,"Trait operators are pretty the same as those defined in Rust in ",(0,r.kt)("inlineCode",{parentName:"p"},"std::ops")," module, but some Rust standard operators became custom operators."),(0,r.kt)("p",null,"Available Trait operators:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Deref")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"DerefMut")," for ",(0,r.kt)("inlineCode",{parentName:"li"},"*a")," prefix operator."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Drop")," - not a real operator, anyway it is included in ",(0,r.kt)("inlineCode",{parentName:"li"},"std::ops")," module."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Fn"),"-like traits (not sure if there would be many like ",(0,r.kt)("inlineCode",{parentName:"li"},"Fn"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"FnMut")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"FnOnce")," as in Rust) for ",(0,r.kt)("inlineCode",{parentName:"li"},"a(...)")," invocation operations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Index")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"IndexMut")," stand for ",(0,r.kt)("inlineCode",{parentName:"li"},"a[...]")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"a[...] = ...")," operations."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Unwrap")," stands for ",(0,r.kt)("inlineCode",{parentName:"li"},"a!")," operation, it is a trait operator as it would likely have complex code transformations which are inexpressible in code."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"Try")," stands for ",(0,r.kt)("inlineCode",{parentName:"li"},"a?")," operation and the reason being a trait operator is the same as for ",(0,r.kt)("inlineCode",{parentName:"li"},"a!"))),(0,r.kt)("h4",{id:"nullable-operators"},"Nullable-operators"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Disclaimer: ",(0,r.kt)("em",{parentName:"p"},"Jacy")," does not have ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," and by it, I mean ",(0,r.kt)("inlineCode",{parentName:"p"},"Option")," type constructor.")),(0,r.kt)("p",null,"This dilemma I came up with is about functionality that Rust has /vs/ functionality of more common nullable-operators.\nIn Swift, ",(0,r.kt)("inlineCode",{parentName:"p"},"a?.b")," means ",(0,r.kt)("inlineCode",{parentName:"p"},"if a is not null then get property b of a, otherwise end up with nil"),".\nOn the other side, in Rust, operation ",(0,r.kt)("inlineCode",{parentName:"p"},"a?.b")," means ",(0,r.kt)("inlineCode",{parentName:"p"},"if a is not Option::None/Result::Error then get property b of unwrapped value a, otherwise RETURN None/Err"),"."),(0,r.kt)("p",null,"I don't want to discuss the generality of the Rust ",(0,r.kt)("inlineCode",{parentName:"p"},"?")," operator, instead I want to bring up the subject of having both functionalities."),(0,r.kt)("p",null,"Questions I have:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Do we need the Rust-like error-propagation operator? - Answer is yes, otherwise there wouldn't be any questions."),(0,r.kt)("li",{parentName:"ol"},"What is better for ",(0,r.kt)("inlineCode",{parentName:"li"},"?")," operator - error-propagation or optional-chaining?"),(0,r.kt)("li",{parentName:"ol"},"What operator to use for error-propagation or optional-chaining if some of them would use ",(0,r.kt)("inlineCode",{parentName:"li"},"?")," operator?")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Question 2.")),(0,r.kt)("p",null,"Operator ",(0,r.kt)("inlineCode",{parentName:"p"},"?")," is pretty common in many languages (JavaScript with its ",(0,r.kt)("inlineCode",{parentName:"p"},"?."),", Swift with ",(0,r.kt)("inlineCode",{parentName:"p"},"?"),", etc.), and the behavior with returning an error on fail is pretty uncommon and specific to Rust.\nKeeping this in mind I would say that ",(0,r.kt)("inlineCode",{parentName:"p"},"?")," should mean optional chaining."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"SOLUTION: ",(0,r.kt)("inlineCode",{parentName:"p"},"?"),' stands for "optional-chaining"')),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Question 3.")),(0,r.kt)("p",null,"In question 2. I said that would like to see ",(0,r.kt)("inlineCode",{parentName:"p"},"?")," as an optional chaining operator, so now I need to choose an operator for the error propagation. It must be a non-conflicting postfix operator with obvious meaning."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"??"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"!!")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"?!"),", and other combinations of ",(0,r.kt)("inlineCode",{parentName:"p"},"?")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"!")," are conflicting as meaning is hard to comprehend if we unwrap"),(0,r.kt)("h3",{id:"lexing"},"Lexing"),(0,r.kt)("p",null,"Lexing can be hard with custom operators.\nLet's at first describe what symbols can operators contain, start/end with, as these rules are required to avoid breaking the entire language syntax."),(0,r.kt)("p",null,"These symbols are considered white-spaces (in sense of operator lexing):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"("),"/",(0,r.kt)("inlineCode",{parentName:"li"},")"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"["),"/",(0,r.kt)("inlineCode",{parentName:"li"},"]"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"{"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"}"),", ",(0,r.kt)("inlineCode",{parentName:"li"},","),", ",(0,r.kt)("inlineCode",{parentName:"li"},":"),", ",(0,r.kt)("inlineCode",{parentName:"li"},";"))),(0,r.kt)("p",null,"I would start with punctuation symbols/sequences which are disallowed in operators at all:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Reserved sequences: ",(0,r.kt)("inlineCode",{parentName:"li"},"//"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"/*"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"*/"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"=")),(0,r.kt)("li",{parentName:"ul"},"Prefix operators: ",(0,r.kt)("inlineCode",{parentName:"li"},"<")," (used for generics), ",(0,r.kt)("inlineCode",{parentName:"li"},"&")," (used for borrowing), ",(0,r.kt)("inlineCode",{parentName:"li"},"*")," (used for dereferencing), ",(0,r.kt)("inlineCode",{parentName:"li"},"?")," (reserved for some use)"),(0,r.kt)("li",{parentName:"ul"},"Postfix operators: ",(0,r.kt)("inlineCode",{parentName:"li"},">")," (used for generics), ",(0,r.kt)("inlineCode",{parentName:"li"},"?")," (for short-circuit optional chaining)"),(0,r.kt)("li",{parentName:"ul"},"Infix operators: ",(0,r.kt)("inlineCode",{parentName:"li"},"?")," (reserved for some use)")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Operator ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," is reserved for dereferencing use as it is context-dependent.\nDepending on context mutability where ",(0,r.kt)("inlineCode",{parentName:"p"},"*")," appears - different trait method called (",(0,r.kt)("inlineCode",{parentName:"p"},"Deref")," for immutable dereferencing like ",(0,r.kt)("inlineCode",{parentName:"p"},"*a")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"DerefMut")," for mutable dereferencing like ",(0,r.kt)("inlineCode",{parentName:"p"},"*a = ..."),")")),(0,r.kt)("p",null,"Operators can begin with: ",(0,r.kt)("inlineCode",{parentName:"p"},"="),", ",(0,r.kt)("inlineCode",{parentName:"p"},"+"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"-"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"*"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"%"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"<"),", ",(0,r.kt)("inlineCode",{parentName:"p"},">"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"&"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"|"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"^"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"?"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"~"),"."),(0,r.kt)("p",null,"Even though operators cannot contain ",(0,r.kt)("inlineCode",{parentName:"p"},":"),", there's one special case -- ",(0,r.kt)("inlineCode",{parentName:"p"},":=")," operator which is overloadable."),(0,r.kt)("p",null,"Custom operators containing dot must begin with a dot to be full operator, so if an operator begins with ",(0,r.kt)("inlineCode",{parentName:"p"},".")," then it can contain more dots after, if not then it is split into two/more operators:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"%.%")," is a ",(0,r.kt)("inlineCode",{parentName:"li"},"%")," followed by ",(0,r.kt)("inlineCode",{parentName:"li"},".%")," operator"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},".%.")," is a full operator ",(0,r.kt)("inlineCode",{parentName:"li"},".%.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"..")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"..="),' (natively "range operators") are full operators too')),(0,r.kt)("p",null,"Symbols that might be used as part of custom operators (maybe only in the middle or beginning/end):"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"$")," (often used in functional languages but in ",(0,r.kt)("em",{parentName:"li"},"Jacy")," proposed for macros and maybe lambdas)")),(0,r.kt)("h4",{id:"problems-to-solve"},"Problems to solve"),(0,r.kt)("h5",{id:"generic-params-problem"},"Generic params problem"),(0,r.kt)("p",null,"When an operator ends with ",(0,r.kt)("inlineCode",{parentName:"p"},"<")," here comes a problem:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jc"},"func <<<T>(other: T) {\n    // ...\n}\n")),(0,r.kt)("p",null,"Anyway, I already proposed a syntax where function generics are written after ",(0,r.kt)("inlineCode",{parentName:"p"},"func")," keyword (like in Kotlin) instead of after identifier.\nSo, this would be parsed successfully:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jc"},"func<T> <<(other: T) {}\n")),(0,r.kt)("h5",{id:"function-overloading"},"Function overloading"),(0,r.kt)("p",null,"One more problem I found is that some desired functionality requires function overloading.\nFor example, in ",(0,r.kt)("em",{parentName:"p"},"Jacy")," as in Rust I would like to be able to use ",(0,r.kt)("inlineCode",{parentName:"p"},"..")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"..=")," range operators not only as infix operators but also as prefix and postfix like ",(0,r.kt)("inlineCode",{parentName:"p"},"a.."),", ",(0,r.kt)("inlineCode",{parentName:"p"},"..b")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"..=b")," (",(0,r.kt)("inlineCode",{parentName:"p"},"a..=")," does not exists, as obviously ",(0,r.kt)("inlineCode",{parentName:"p"},"Infinity + 1")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"Infinity"),")."),(0,r.kt)("p",null,"There're three solutions I see:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Disallow one-sided range operators until operator overloading will be implemented."),(0,r.kt)("li",{parentName:"ol"},"Make range operators trait-operators only, thus disallow to customize them.")),(0,r.kt)("p",null,"The 1. solution sounds better for me as I assumed to implement function overloading in the future.\nIf one day I'll 100% establish that ",(0,r.kt)("em",{parentName:"p"},"Jacy")," would never have function overloading -- 2. variant will be used."))}m.isMDXComponent=!0}}]);