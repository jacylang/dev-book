"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[8088],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return s}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function d(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?d(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):d(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},d=Object.keys(t);for(a=0;a<d.length;a++)n=d[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(t);for(a=0;a<d.length;a++)n=d[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var o=a.createContext({}),l=function(t){var e=a.useContext(o),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=l(t.components);return a.createElement(o.Provider,{value:e},t.children)},k={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},N=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,d=t.originalType,o=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),N=l(n),s=r,c=N["".concat(o,".").concat(s)]||N[s]||k[s]||d;return n?a.createElement(c,i(i({ref:e},m),{},{components:n})):a.createElement(c,i({ref:e},m))}));function s(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var d=n.length,i=new Array(d);i[0]=N;var p={};for(var o in e)hasOwnProperty.call(e,o)&&(p[o]=e[o]);p.originalType=t,p.mdxType="string"==typeof t?t:r,i[1]=p;for(var l=2;l<d;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},9269:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return l},toc:function(){return m},default:function(){return N}});var a=n(7462),r=n(3366),d=(n(7294),n(3905)),i=["components"],p={},o="Operators and punctuations",l={unversionedId:"appendices/ops-and-puncts",id:"appendices/ops-and-puncts",isDocsHomePage:!1,title:"Operators and punctuations",description:"Operators in Jacy are not something internally special in comparison with",source:"@site/docs/appendices/ops-and-puncts.md",sourceDirName:"appendices",slug:"/appendices/ops-and-puncts",permalink:"/dev-book/docs/appendices/ops-and-puncts",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/appendices/ops-and-puncts.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"*Jacy* Programming language [checklist](https://www.mcmillen.dev/language_checklist.html)",permalink:"/dev-book/docs/appendices/checklist"},next:{title:"Taxonomy and glossary",permalink:"/dev-book/docs/appendices/taxonomy-&-glossary"}},m=[{value:"Operators in expressions",id:"operators-in-expressions",children:[],level:2},{value:"Punctuations",id:"punctuations",children:[],level:2},{value:"Operators and punctuations precedence",id:"operators-and-punctuations-precedence",children:[],level:2}],k={toc:m};function N(t){var e=t.components,n=(0,r.Z)(t,i);return(0,d.kt)("wrapper",(0,a.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,d.kt)("h1",{id:"operators-and-punctuations"},"Operators and punctuations"),(0,d.kt)("p",null,"Operators in ",(0,d.kt)("em",{parentName:"p"},"Jacy")," are not something internally special in comparison with\nfunctions. When calling ",(0,d.kt)("inlineCode",{parentName:"p"},"a + b")," the trait ",(0,d.kt)("inlineCode",{parentName:"p"},"std::ops::Add")," will be used. Mostly\nall operators are overloadable."),(0,d.kt)("h2",{id:"operators-in-expressions"},"Operators in expressions"),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Operator"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Trait to overload"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a + b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Add"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a - b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Sub"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a * b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Mul"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a / b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Div"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a % b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Rem"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a ** b")," (","*",")"),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Pow"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a or b")),(0,d.kt)("td",{parentName:"tr",align:"left"},"N/A")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a and b")),(0,d.kt)("td",{parentName:"tr",align:"left"},"N/A")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"!a")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Not"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a & b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::BitAnd"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},"`a"),(0,d.kt)("td",{parentName:"tr",align:"left"},"b`")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a << b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Shl"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a >> b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Shr"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a ^ b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Xor"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a < b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a > b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a >= b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a <= b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a <=> b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Cmp"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a == b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a != b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Eq"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a === b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a !== b")),(0,d.kt)("td",{parentName:"tr",align:"left"},"??? (Not described)")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a..b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Range"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a..=b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::RangeIncl"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"..b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::RangeTo"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a..")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::RangeFrom"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"..=b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::RangeToIncl"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"..")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::RangeFull")," (","*","*",")")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a += b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::AddAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a -= b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::SubAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a *= b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::MulAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a /= b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::DivAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a %= b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::RemAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a **= b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::PowAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},"`a"),(0,d.kt)("td",{parentName:"tr",align:"left"},"= b`")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a &= b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::BitAndAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a <<= b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::ShlAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a >>= b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::ShrAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a ^= b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::XorAssign"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a?")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Try::branch"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a!")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Try::unwrap"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a.b")),(0,d.kt)("td",{parentName:"tr",align:"left"},"N/A")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a()")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Invoke"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"*a")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::Deref"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"*a = b")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"std::ops::DerefMut"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"&a")),(0,d.kt)("td",{parentName:"tr",align:"left"},"N/A")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},"`a"),(0,d.kt)("td",{parentName:"tr",align:"left"},"> b`")))),(0,d.kt)("ul",null,(0,d.kt)("li",{parentName:"ul"},"(","*",") For the exponentiation operator, there can be a conflict with\ndereferencing operator ",(0,d.kt)("inlineCode",{parentName:"li"},"*"),", to solve it you need to put white space between\nterms. E.g. ",(0,d.kt)("inlineCode",{parentName:"li"},"a**b")," == ",(0,d.kt)("inlineCode",{parentName:"li"},"a ** b")," as far as ",(0,d.kt)("inlineCode",{parentName:"li"},"a **b")," == ",(0,d.kt)("inlineCode",{parentName:"li"},"a ** b")," but not == ",(0,d.kt)("inlineCode",{parentName:"li"},"a *\n*b"),", and ",(0,d.kt)("inlineCode",{parentName:"li"},"a*b")," == ",(0,d.kt)("inlineCode",{parentName:"li"},"a * b"),". So, with dereferencing, always put white space\nbefore ",(0,d.kt)("inlineCode",{parentName:"li"},"*")," (as dereferencing operator)."),(0,d.kt)("li",{parentName:"ul"},"(","*","*",") ",(0,d.kt)("inlineCode",{parentName:"li"},"RangeFull")," is not a real operator, it is an empty ",(0,d.kt)("inlineCode",{parentName:"li"},"struct")," which can\nbe passed somewhere.")),(0,d.kt)("h2",{id:"punctuations"},"Punctuations"),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"left"},"Punctuation"),(0,d.kt)("th",{parentName:"tr",align:"left"},"Usages"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},":")),(0,d.kt)("td",{parentName:"tr",align:"left"},"Type annotations in almost all constructions, function call argument name")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"->")),(0,d.kt)("td",{parentName:"tr",align:"left"},"Function types, lambdas")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},";")),(0,d.kt)("td",{parentName:"tr",align:"left"},"Statement terminator, body ignorance, item declaration")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"=>")),(0,d.kt)("td",{parentName:"tr",align:"left"},(0,d.kt)("inlineCode",{parentName:"td"},"match")," arms")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"left"}),(0,d.kt)("td",{parentName:"tr",align:"left"})))),(0,d.kt)("h2",{id:"operators-and-punctuations-precedence"},"Operators and punctuations precedence"),(0,d.kt)("p",null,"Precedence (from highest to lowest)"),(0,d.kt)("table",null,(0,d.kt)("thead",{parentName:"table"},(0,d.kt)("tr",{parentName:"thead"},(0,d.kt)("th",{parentName:"tr",align:"center"},"Symbols"))),(0,d.kt)("tbody",{parentName:"table"},(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a::b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a.b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a()")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a[]"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a?"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"-a")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"*a")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"!a")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"&a")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"&mut a"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a as b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a ** b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a * b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a / b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a % b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a + b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a - b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a << b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a >> b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a & b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a ^ b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},"`a")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a == b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a != b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a === b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a !== b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a < b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a > b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a <= b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a >= b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"<=>"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a and b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a or b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a..b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a..")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"..")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"..=b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"..b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a..=b"))),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},"`a")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"a = b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a += b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a -= b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a *= b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a /= b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a %= b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a **= b")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"a &= b")," ","\xa0"," `a")),(0,d.kt)("tr",{parentName:"tbody"},(0,d.kt)("td",{parentName:"tr",align:"center"},(0,d.kt)("inlineCode",{parentName:"td"},"return a")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"break a")," ","\xa0"," ",(0,d.kt)("inlineCode",{parentName:"td"},"() -> {}"))))))}N.isMDXComponent=!0}}]);