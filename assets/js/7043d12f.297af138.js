"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[387],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return c}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)t=a[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),p=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},m=function(e){var n=p(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},d=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,m=i(e,["components","mdxType","originalType","parentName"]),d=p(t),c=r,f=d["".concat(s,".").concat(c)]||d[c]||u[c]||a;return t?o.createElement(f,l(l({ref:n},m),{},{components:t})):o.createElement(f,l({ref:n},m))}));function c(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var a=t.length,l=new Array(a);l[0]=d;var i={};for(var s in n)hasOwnProperty.call(n,s)&&(i[s]=n[s]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<a;p++)l[p]=t[p];return o.createElement.apply(null,l)}return o.createElement.apply(null,t)}d.displayName="MDXCreateElement"},74051:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return i},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return m},default:function(){return d}});var o=t(87462),r=t(63366),a=(t(67294),t(3905)),l=["components"],i={},s="Importation and the Module system",p={unversionedId:"compiler-workflow/name-res-stage/importation-&-module-system",id:"compiler-workflow/name-res-stage/importation-&-module-system",isDocsHomePage:!1,title:"Importation and the Module system",description:"The importation process is what the compiler does when a user writes use.",source:"@site/docs/compiler-workflow/name-res-stage/importation-&-module-system.md",sourceDirName:"compiler-workflow/name-res-stage",slug:"/compiler-workflow/name-res-stage/importation-&-module-system",permalink:"/dev-book/docs/compiler-workflow/name-res-stage/importation-&-module-system",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/compiler-workflow/name-res-stage/importation-&-module-system.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"lexer",permalink:"/dev-book/docs/compiler-workflow/parsing-stage/lexer"},next:{title:"Names & Imports",permalink:"/dev-book/docs/compiler-workflow/name-res-stage/index"}},m=[{value:"Modules",id:"modules",children:[],level:2},{value:"Importation",id:"importation",children:[],level:2},{value:"The problem with overloads",id:"the-problem-with-overloads",children:[],level:2}],u={toc:m};function d(e){var n=e.components,t=(0,r.Z)(e,l);return(0,a.kt)("wrapper",(0,o.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"importation-and-the-module-system"},"Importation and the Module system"),(0,a.kt)("p",null,"The importation process is what the compiler does when a user writes ",(0,a.kt)("inlineCode",{parentName:"p"},"use"),"."),(0,a.kt)("h2",{id:"modules"},"Modules"),(0,a.kt)("p",null,"In ",(0,a.kt)("em",{parentName:"p"},"Jacy")," each file and each directory is a module, of course, including user-defined modules (",(0,a.kt)("inlineCode",{parentName:"p"},"mod")," items).\nThe module system is similar to Rust, the root file is the root of the module tree, and nested modules paths are related to it."),(0,a.kt)("h2",{id:"importation"},"Importation"),(0,a.kt)("h2",{id:"the-problem-with-overloads"},"The problem with overloads"),(0,a.kt)("p",null,"Function overloading via labels might seem to be easy-implemented and it's true as we don't deal with types, anyway, there's a problem with importation and exportation.\nExample:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jc"},"mod m {\n    pub func foo(label1: int, label2: int);\n}\n\nmod n {\n    pub use m::foo;\n\n    pub func foo(label3: int, label4: int);\n}\n")),(0,a.kt)("p",null,"Here, module ",(0,a.kt)("inlineCode",{parentName:"p"},"m")," exports overload ",(0,a.kt)("inlineCode",{parentName:"p"},"foo(label1:label2:)")," and module ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," imports it and exports as well."),(0,a.kt)("p",null,"The module tree before the importation process will look so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-text"},"[ROOT]: {\n    `mod` 'm': {\n        FOS#someID\n          - `func` 'foo': 'foo(label1:label2:)'\n    }\n\n    `mod` 'n': {\n        FOS#someID\n          - `func` 'foo': 'foo(label3:label4:)'\n    }\n}\n")),(0,a.kt)("p",null,"After importation, module ",(0,a.kt)("inlineCode",{parentName:"p"},"n")," must contain alias to function ",(0,a.kt)("inlineCode",{parentName:"p"},"foo(label1:label2)")," and locally defined ",(0,a.kt)("inlineCode",{parentName:"p"},"foo(label3:label4)"),".\nWhen the module tree is building we create FOSes (Function Overload Sets) each of those has a unique index id.\nSo, when we importing a function with the same name should we update existent FOS?"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jc"},"mod m {\n    func foo(private: int); // #1\n    pub func foo(public: int); // #2\n} // #0\n\nmod n {\n    use m::foo;\n\n    func foo(nested: int); // #4\n} // #3\n")),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DefTable"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jon"},"FOSes: [\n    {\n        '(private:)': #1\n        '(public:)': #2\n    }\n    {\n        '(nested:)': #4\n    }\n]\n")),(0,a.kt)("p",null,"Module Tree:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jon"},"{\n    'm': {\n        kind: 'mod'\n        defId: 0\n        defs: {\n            foo: {\n                funcOverloadId: 0\n            }\n        }\n    }\n    'n': {\n        kind: 'mod'\n        defId: 1\n        defs: {\n            foo: {\n                funcOverloadId: 1\n            }\n        }\n    }\n}\n")),(0,a.kt)("p",null,"After importation, if FOSes updated."),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"DefTable"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jon"},"FOSes: [\n    {\n        '(private:)': #1\n        '(public:)': #2\n    }\n    {\n        '(private:)': 'Alias to #1'\n        '(public:)': 'Alias to #2'\n        '(nested:)': #4\n    }\n]\n")),(0,a.kt)("p",null,"So, let's establish how overloads importation works:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"We never modify FOS which we import into the module"),(0,a.kt)("li",{parentName:"ul"},"On importation, FOS of the module where ",(0,a.kt)("inlineCode",{parentName:"li"},"use"),"-declaration present is modified -- imported overloads added"),(0,a.kt)("li",{parentName:"ul"},"Each FOS is unique per module, never redefine the same FOS in different modules")))}d.isMDXComponent=!0}}]);