"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[6880],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return s}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function l(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function d(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var p=a.createContext({}),o=function(t){var e=a.useContext(p),n=e;return t&&(n="function"==typeof t?t(e):l(l({},e),t)),n},m=function(t){var e=o(t.components);return a.createElement(p.Provider,{value:e},t.children)},k={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},N=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,p=t.parentName,m=d(t,["components","mdxType","originalType","parentName"]),N=o(n),s=r,c=N["".concat(p,".").concat(s)]||N[s]||k[s]||i;return n?a.createElement(c,l(l({ref:e},m),{},{components:n})):a.createElement(c,l({ref:e},m))}));function s(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,l=new Array(i);l[0]=N;var d={};for(var p in e)hasOwnProperty.call(e,p)&&(d[p]=e[p]);d.originalType=t,d.mdxType="string"==typeof t?t:r,l[1]=d;for(var o=2;o<i;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}N.displayName="MDXCreateElement"},1734:function(t,e,n){n.d(e,{ZP:function(){return p}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=["components"],d={toc:[]};function p(t){var e=t.components,n=(0,r.Z)(t,l);return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,'This table shows which operators are stronger than others, associativity is marked as "left to right" for left-associative operators and "right to left" for right-associative operators.\nThis table also includes expressions that are not operator expressions, anyway, it might be helpful to know that they are parsed assuming this figurative precedence.'),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Precedence index is placed just for some help, sometimes you need to know the order.")),(0,i.kt)("p",null,"The table is from high to low precedence ordered -- the operators in the first row have the strongest precedence."),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},"Non-Assoc means non-associative operator, i.e. it is not allowed to combine it with itself like so ",(0,i.kt)("inlineCode",{parentName:"p"},"a OP b OP c"))),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"N"),(0,i.kt)("th",{parentName:"tr",align:null},"Operator groups / expressions"),(0,i.kt)("th",{parentName:"tr",align:null},"Associativity"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"20"),(0,i.kt)("td",{parentName:"tr",align:null},"Paths (",(0,i.kt)("inlineCode",{parentName:"td"},"::"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"19"),(0,i.kt)("td",{parentName:"tr",align:null},"Field expression (aka member access - ",(0,i.kt)("inlineCode",{parentName:"td"},"a.b"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"left to right")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"18"),(0,i.kt)("td",{parentName:"tr",align:null},"Invocations (aka calls - ",(0,i.kt)("inlineCode",{parentName:"td"},"a(...)"),"), array access (aka indexing - ",(0,i.kt)("inlineCode",{parentName:"td"},"a[...]"),")"),(0,i.kt)("td",{parentName:"tr",align:null},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"17"),(0,i.kt)("td",{parentName:"tr",align:null},"[Postfix operators]"," ",(0,i.kt)("inlineCode",{parentName:"td"},"?")),(0,i.kt)("td",{parentName:"tr",align:null},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"16"),(0,i.kt)("td",{parentName:"tr",align:null},"[Prefix operators]"," ",(0,i.kt)("inlineCode",{parentName:"td"},"!"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"&"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"&mut"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"-"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"*")),(0,i.kt)("td",{parentName:"tr",align:null},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"15"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"as")),(0,i.kt)("td",{parentName:"tr",align:null},"left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"14"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"*")," ",(0,i.kt)("inlineCode",{parentName:"td"},"/")," ",(0,i.kt)("inlineCode",{parentName:"td"},"%")),(0,i.kt)("td",{parentName:"tr",align:null},"left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"13"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"+")," ",(0,i.kt)("inlineCode",{parentName:"td"},"-")),(0,i.kt)("td",{parentName:"tr",align:null},"left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"12"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"..")," ",(0,i.kt)("inlineCode",{parentName:"td"},"..=")),(0,i.kt)("td",{parentName:"tr",align:null},"non-assoc")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"11"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<<")," ",(0,i.kt)("inlineCode",{parentName:"td"},">>")),(0,i.kt)("td",{parentName:"tr",align:null},"left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"10"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"&")," (infix)"),(0,i.kt)("td",{parentName:"tr",align:null},"left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"^")),(0,i.kt)("td",{parentName:"tr",align:null},"left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"8"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"\u2223")),(0,i.kt)("td",{parentName:"tr",align:null},"left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"7"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"in")),(0,i.kt)("td",{parentName:"tr",align:null},"non-assoc")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"6"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<=>")),(0,i.kt)("td",{parentName:"tr",align:null},"non-assoc")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"5"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"<")," ",(0,i.kt)("inlineCode",{parentName:"td"},">")," ",(0,i.kt)("inlineCode",{parentName:"td"},"<=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"=>")),(0,i.kt)("td",{parentName:"tr",align:null},"non-assoc")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"4"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"==")," ",(0,i.kt)("inlineCode",{parentName:"td"},"!=")),(0,i.kt)("td",{parentName:"tr",align:null},"non-assoc")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"3"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"and")),(0,i.kt)("td",{parentName:"tr",align:null},"left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"2"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"or")),(0,i.kt)("td",{parentName:"tr",align:null},"left")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"1"),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"+=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"-=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"*=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"/=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"%=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"&=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"\u2223=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"^=")," ",(0,i.kt)("inlineCode",{parentName:"td"},"<<=")," ",(0,i.kt)("inlineCode",{parentName:"td"},">>=")),(0,i.kt)("td",{parentName:"tr",align:null},"left")))),(0,i.kt)("p",null,"Prefix operators: ",(0,i.kt)("inlineCode",{parentName:"p"},"not"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," (borrow), ",(0,i.kt)("inlineCode",{parentName:"p"},"&mut")," (borrow as mutable, ",(0,i.kt)("inlineCode",{parentName:"p"},"&")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"mut")," can have whitespace between), ",(0,i.kt)("inlineCode",{parentName:"p"},"-")," (negation), ",(0,i.kt)("inlineCode",{parentName:"p"},"*")," (dereference)."),(0,i.kt)("p",null,"Postfix operators: ",(0,i.kt)("inlineCode",{parentName:"p"},"?")," (optional chaining), ",(0,i.kt)("inlineCode",{parentName:"p"},"!")," (unwrap)."),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Range operators precedence [why?]"),(0,i.kt)("blockquote",null,"Range operators have this kind of precedence as we want to write `a..b+1` which means `a..(b+1)` as far as writing `a..b == c..d` which means `(a..b) == (c..d)`")))}p.isMDXComponent=!0},4525:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return p},contentTitle:function(){return o},metadata:function(){return m},toc:function(){return k},default:function(){return s}});var a=n(7462),r=n(3366),i=(n(7294),n(3905)),l=n(1734),d=["components"],p={sidebar_position:30},o="Operators and punctuations",m={unversionedId:"appendices/ops-and-puncts",id:"appendices/ops-and-puncts",isDocsHomePage:!1,title:"Operators and punctuations",description:"Operators in Jacy are not something internally special in comparison with",source:"@site/docs/appendices/ops-and-puncts.mdx",sourceDirName:"appendices",slug:"/appendices/ops-and-puncts",permalink:"/dev-book/docs/appendices/ops-and-puncts",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/appendices/ops-and-puncts.mdx",tags:[],version:"current",sidebarPosition:30,frontMatter:{sidebar_position:30},sidebar:"tutorialSidebar",previous:{title:"Why?",permalink:"/dev-book/docs/appendices/why"},next:{title:"Taxonomy and glossary",permalink:"/dev-book/docs/appendices/taxonomy-&-glossary"}},k=[{value:"Operators in expressions",id:"operators-in-expressions",children:[],level:2},{value:"Punctuations",id:"punctuations",children:[],level:2},{value:"Operators and punctuations precedence",id:"operators-and-punctuations-precedence",children:[],level:2}],N={toc:k};function s(t){var e=t.components,n=(0,r.Z)(t,d);return(0,i.kt)("wrapper",(0,a.Z)({},N,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"operators-and-punctuations"},"Operators and punctuations"),(0,i.kt)("p",null,"Operators in ",(0,i.kt)("em",{parentName:"p"},"Jacy")," are not something internally special in comparison with\nfunctions. When calling ",(0,i.kt)("inlineCode",{parentName:"p"},"a + b")," the trait ",(0,i.kt)("inlineCode",{parentName:"p"},"std::ops::Add")," will be used. Mostly\nall operators are overloadable."),(0,i.kt)("h2",{id:"operators-in-expressions"},"Operators in expressions"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"center"},"Operator"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Trait to overload"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a + b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Add"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a - b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Sub"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a * b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Mul"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a / b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Div"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a % b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Rem"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a ** b")," (","*",")"),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Pow"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a or b")),(0,i.kt)("td",{parentName:"tr",align:"left"},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a and b")),(0,i.kt)("td",{parentName:"tr",align:"left"},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"!a")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Not"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a & b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::BitAnd"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a \u2223 b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::BitOr"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a << b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Shl"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a >> b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Shr"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a ^ b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Xor"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a < b")," ","\xa0"," ",(0,i.kt)("inlineCode",{parentName:"td"},"a > b")," ","\xa0"," ",(0,i.kt)("inlineCode",{parentName:"td"},"a >= b")," ","\xa0"," ",(0,i.kt)("inlineCode",{parentName:"td"},"a <= b")," ","\xa0"," ",(0,i.kt)("inlineCode",{parentName:"td"},"a <=> b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Cmp"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a == b")," ","\xa0"," ",(0,i.kt)("inlineCode",{parentName:"td"},"a != b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Eq"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a === b")," ","\xa0"," ",(0,i.kt)("inlineCode",{parentName:"td"},"a !== b")),(0,i.kt)("td",{parentName:"tr",align:"left"},"??? (Not described)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a..b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Range"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a..=b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::RangeIncl"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"..b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::RangeTo"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a..")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::RangeFrom"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"..=b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::RangeToIncl"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"..")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::RangeFull")," (","*","*",")")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a += b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::AddAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a -= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::SubAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a *= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::MulAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a /= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::DivAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a %= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::RemAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a **= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::PowAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a \u2223= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::BitOrAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a &= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::BitAndAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a <<= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::ShlAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a >>= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::ShrAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a ^= b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::XorAssign"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a?")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Try::branch"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a!")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Try::unwrap"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a.b")),(0,i.kt)("td",{parentName:"tr",align:"left"},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a()")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Invoke"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"*a")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::Deref"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"*a = b")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"std::ops::DerefMut"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"&a")),(0,i.kt)("td",{parentName:"tr",align:"left"},"N/A")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"center"},(0,i.kt)("inlineCode",{parentName:"td"},"a \u2223> b")),(0,i.kt)("td",{parentName:"tr",align:"left"},"N/A")))),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"(","*",") For the exponentiation operator, there can be a conflict with\ndereferencing operator ",(0,i.kt)("inlineCode",{parentName:"li"},"*"),", to solve it you need to put white space between\nterms. E.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"a**b")," == ",(0,i.kt)("inlineCode",{parentName:"li"},"a ** b")," as far as ",(0,i.kt)("inlineCode",{parentName:"li"},"a **b")," == ",(0,i.kt)("inlineCode",{parentName:"li"},"a ** b")," but not == ",(0,i.kt)("inlineCode",{parentName:"li"},"a *\n*b"),", and ",(0,i.kt)("inlineCode",{parentName:"li"},"a*b")," == ",(0,i.kt)("inlineCode",{parentName:"li"},"a * b"),". So, with dereferencing, always put white space\nbefore ",(0,i.kt)("inlineCode",{parentName:"li"},"*")," (as dereferencing operator)."),(0,i.kt)("li",{parentName:"ul"},"(","*","*",") ",(0,i.kt)("inlineCode",{parentName:"li"},"RangeFull")," is not a real operator, it is an empty ",(0,i.kt)("inlineCode",{parentName:"li"},"struct")," which can\nbe passed somewhere.")),(0,i.kt)("h2",{id:"punctuations"},"Punctuations"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"Symbol"),(0,i.kt)("th",{parentName:"tr",align:"left"},"Usages"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},":")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Type annotations in almost all constructions, function call argument name")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"->")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Function types, lambdas")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},";")),(0,i.kt)("td",{parentName:"tr",align:"left"},"Statement terminator, body ignorance, item declaration")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"=>")),(0,i.kt)("td",{parentName:"tr",align:"left"},(0,i.kt)("inlineCode",{parentName:"td"},"match")," arms")))),(0,i.kt)("h2",{id:"operators-and-punctuations-precedence"},"Operators and punctuations precedence"),(0,i.kt)("p",null,"Precedence (from highest to lowest)"),(0,i.kt)(l.ZP,{mdxType:"PrecedenceTable"}))}s.isMDXComponent=!0}}]);