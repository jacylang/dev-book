"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[1402],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=r.createContext({}),c=function(e){var t=r.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=c(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),d=c(n),m=a,k=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?r.createElement(k,l(l({ref:t},s),{},{components:n})):r.createElement(k,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,l=new Array(o);l[0]=d;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var c=2;c<o;c++)l[c]=n[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},54654:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return i},contentTitle:function(){return p},metadata:function(){return c},toc:function(){return s},default:function(){return d}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),l=["components"],i={},p="Null coalesce",c={unversionedId:"particles/null-coalesce",id:"particles/null-coalesce",isDocsHomePage:!1,title:"Null coalesce",description:'Despite the fact that Jacy does not have null replacing it with Option such as what Rust does, this particle is called so to use common term "null-coalesce" familiar to SQL, JS, etc. programmers.',source:"@site/docs/particles/null-coalesce.md",sourceDirName:"particles",slug:"/particles/null-coalesce",permalink:"/dev-book/docs/particles/null-coalesce",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/particles/null-coalesce.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"`not` prependent operator",permalink:"/dev-book/docs/particles/not-prepedent-op"},next:{title:"Optional Chaining and the Try operator",permalink:"/dev-book/docs/particles/optional-chaining-&-try"}},s=[{value:"Null coalescing operator",id:"null-coalescing-operator",children:[],level:2},{value:"Nullack operator",id:"nullack-operator",children:[{value:"Variant #1",id:"variant-1",children:[],level:3}],level:2}],u={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"null-coalesce"},"Null coalesce"),(0,o.kt)("p",null,"Despite the fact that ",(0,o.kt)("em",{parentName:"p"},"Jacy")," does not have null replacing it with ",(0,o.kt)("inlineCode",{parentName:"p"},"Option"),' such as what Rust does, this particle is called so to use common term "null-coalesce" familiar to SQL, JS, etc. programmers.'),(0,o.kt)("h2",{id:"null-coalescing-operator"},"Null coalescing operator"),(0,o.kt)("p",null,(0,o.kt)("img",{parentName:"p",src:"https://i.stack.imgur.com/hQlrps.png",alt:"Elvis operator"})),(0,o.kt)("p",null,"This operator exists in, for example JavaScript - ",(0,o.kt)("inlineCode",{parentName:"p"},"??"),", also known as Elvis operator - ",(0,o.kt)("inlineCode",{parentName:"p"},"?:")," in many languages (PHP, Kotlin) or ",(0,o.kt)("inlineCode",{parentName:"p"},"COALESCE")," in SQL."),(0,o.kt)("p",null,"At first I would like to remind that ",(0,o.kt)("em",{parentName:"p"},"Jacy")," does not have ternary operator ",(0,o.kt)("inlineCode",{parentName:"p"},"a ? b : c")," that was the source of Elvis operator syntax with removed second term ",(0,o.kt)("inlineCode",{parentName:"p"},"a ?: b = a ? a : b"),". Thus ",(0,o.kt)("em",{parentName:"p"},"Jacy")," will use ",(0,o.kt)("inlineCode",{parentName:"p"},"??")," operator further in this particle and likely in the implementation."),(0,o.kt)("p",null,"Null coalescing operator is a kind of disjunction (",(0,o.kt)("inlineCode",{parentName:"p"},"||"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"or")," in ",(0,o.kt)("em",{parentName:"p"},"Jacy"),') but for values which are "optional" (nullable).\nThat\'s why I came up with an idea of null-conjunction, that is ',(0,o.kt)("inlineCode",{parentName:"p"},"&&")," operator for optional values."),(0,o.kt)("h2",{id:"nullack-operator"},"Nullack operator"),(0,o.kt)("p",null,"Nullack is new term I'll use here as short form of (lack of null values), nullack operator is a null-conjunction operator.\nThis idea is pretty uncommon thus behavior I choose would not likely be useful, anyway I want to discuss it."),(0,o.kt)("p",null,"Operator syntax is not specified, thus ",(0,o.kt)("inlineCode",{parentName:"p"},"[OP]")," will be used further."),(0,o.kt)("p",null,"Code sample:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jc"},"a [OP] b\n")),(0,o.kt)("p",null,"Where ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," has type ",(0,o.kt)("inlineCode",{parentName:"p"},"Option<T>")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"Option<b>")," has type ",(0,o.kt)("inlineCode",{parentName:"p"},"U"),"."),(0,o.kt)("p",null,"This operator MUST return ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," in case when ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," OR ",(0,o.kt)("inlineCode",{parentName:"p"},"b")," are ",(0,o.kt)("inlineCode",{parentName:"p"},"None")," values."),(0,o.kt)("p",null,"What this operator should return if both of ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," AND ",(0,o.kt)("inlineCode",{parentName:"p"},"b")," are ",(0,o.kt)("inlineCode",{parentName:"p"},"Some")," values is described in variants below."),(0,o.kt)("h3",{id:"variant-1"},"Variant #1"),(0,o.kt)("p",null,"Return ",(0,o.kt)("inlineCode",{parentName:"p"},"(a!, b!): (T, U)"),", that is a tuple where first and second elements are unwrapped ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"b")," respectively."))}d.isMDXComponent=!0}}]);