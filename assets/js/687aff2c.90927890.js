"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[6284],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var d=o.createContext({}),p=function(e){var t=o.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},s=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,d=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),s=p(n),m=r,f=s["".concat(d,".").concat(m)]||s[m]||u[m]||i;return n?o.createElement(f,a(a({ref:t},c),{},{components:n})):o.createElement(f,a({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=s;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:r,a[1]=l;for(var p=2;p<i;p++)a[p]=n[p];return o.createElement.apply(null,a)}return o.createElement.apply(null,n)}s.displayName="MDXCreateElement"},3976:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return c},default:function(){return s}});var o=n(7462),r=n(3366),i=(n(7294),n(3905)),a=["components"],l={},d="Dev Mode",p={unversionedId:"cli/dev-mode",id:"cli/dev-mode",isDocsHomePage:!1,title:"Dev Mode",description:"This is a plan (I'm going to implement it now \ud83d\ude07) for jc CLI dev-mode enhancement and documentation for dev-mode at all.",source:"@site/docs/cli/dev-mode.md",sourceDirName:"cli",slug:"/cli/dev-mode",permalink:"/dev-book/docs/cli/dev-mode",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/cli/dev-mode.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Why affine types",permalink:"/dev-book/docs/concept/why-affine-types"},next:{title:"Jacy CLI",permalink:"/dev-book/docs/cli/index"}},c=[{value:"What is dev-mode",id:"what-is-dev-mode",children:[],level:2},{value:"Functionality",id:"functionality",children:[],level:2},{value:"CLI Options",id:"cli-options",children:[],level:2}],u={toc:c};function s(e){var t=e.components,n=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"dev-mode"},"Dev Mode"),(0,i.kt)("p",null,"This is a plan (I'm going to implement it now \ud83d\ude07) for ",(0,i.kt)("inlineCode",{parentName:"p"},"jc")," CLI dev-mode enhancement and documentation for dev-mode at all."),(0,i.kt)("h2",{id:"what-is-dev-mode"},"What is dev-mode"),(0,i.kt)("p",null,"Dev mode is nothing more than just a controller taking root all over the ",(0,i.kt)("em",{parentName:"p"},"Jacy")," compiler.\nCurrently, dev-mode can be enabled via ",(0,i.kt)("inlineCode",{parentName:"p"},"--dev")," boolean option (flag), but I'm going to make it more tunable."),(0,i.kt)("h2",{id:"functionality"},"Functionality"),(0,i.kt)("p",null,"This is what I want dev-mode to help me with:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Logging only if I need."),(0,i.kt)("li",{parentName:"ul"},"Producing debug info (I'm talking about logged debug info, not about executable debug info), i.e. printing IRs and storages data, only when I want.")),(0,i.kt)("p",null,"And to that all for each stage only when I want."),(0,i.kt)("h2",{id:"cli-options"},"CLI Options"),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},(0,i.kt)("strong",{parentName:"p"},"--dev option MUST be passed to cli to enable all other dev options"))),(0,i.kt)("p",null,"The main point is to make dev-mode tuning as simple as possible.\nMy view is following: \"I'm working on {STAGE} stage, so turn on logs for {STAGE} - ",(0,i.kt)("inlineCode",{parentName:"p"},"--dev-log={STAGE}"),", print debug info related to {STAGE} - ",(0,i.kt)("inlineCode",{parentName:"p"},"--dev-print={STAGE}"),', etc."\nAnd then, if I want to see logs for {ANOTHER_STAGE} stage, I would pass ',(0,i.kt)("inlineCode",{parentName:"p"},"--dev-log={ANOTHER_STAGE}")," or by adding ",(0,i.kt)("inlineCode",{parentName:"p"},"{ANOTHER_STAGE}")," to the already passed ",(0,i.kt)("inlineCode",{parentName:"p"},"--dev-log")," option after ",(0,i.kt)("inlineCode",{parentName:"p"},","),"."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--dev-print={STAGE}")," - single value - Enable stage-related IRs and storages pretty printing."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--dev-log={STAGE}")," - single value - Enable dev-logs for specific stage ",(0,i.kt)("inlineCode",{parentName:"li"},"{STAGE}"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--dev-full")," - boolean - Enable all ",(0,i.kt)("inlineCode",{parentName:"li"},"dev")," options for all stages.")))}s.isMDXComponent=!0}}]);