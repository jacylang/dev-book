"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[5723],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=a,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5708:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),a=n(3366),i=(n(7294),n(3905)),o=["components"],s={},l="Strings",c={unversionedId:"particles/strings",id:"particles/strings",isDocsHomePage:!1,title:"Strings",description:"This particle is about the design of strings and characters, from view of the syntax to language features.",source:"@site/docs/particles/strings.md",sourceDirName:"particles",slug:"/particles/strings",permalink:"/dev-book/docs/particles/strings",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/particles/strings.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"`std` annotations",permalink:"/dev-book/docs/particles/std-annotations"},next:{title:"Blocks",permalink:"/dev-book/docs/particles/syntax-decisions/blocks"}},p=[{value:"Escape sequences",id:"escape-sequences",children:[{value:"Proposals",id:"proposals",children:[{value:"Platform-dependent new-line",id:"platform-dependent-new-line",children:[],level:4}],level:3}],level:2},{value:"Character literals",id:"character-literals",children:[],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"strings"},"Strings"),(0,i.kt)("p",null,"This particle is about the design of strings and characters, from view of the syntax to language features."),(0,i.kt)("h2",{id:"escape-sequences"},"Escape sequences"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Jacy")," supports common C-like escape sequences, with some changes.\nThese are: ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"\\r"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"\\t"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"\\b"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"\\f"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"\\v"),", that have the same meaning as in other languages."),(0,i.kt)("p",null,"Numeric character literals:\n",(0,i.kt)("inlineCode",{parentName:"p"},"\\###")," - octal representation\n",(0,i.kt)("inlineCode",{parentName:"p"},"\\x##")," - hexadecimal representation\n",(0,i.kt)("inlineCode",{parentName:"p"},"\\u##")," - unicode codepoint below ",(0,i.kt)("inlineCode",{parentName:"p"},"10000"),"\n",(0,i.kt)("inlineCode",{parentName:"p"},"\\U####")," - unicode codepoint"),(0,i.kt)("h3",{id:"proposals"},"Proposals"),(0,i.kt)("h4",{id:"platform-dependent-new-line"},"Platform-dependent new-line"),(0,i.kt)("p",null,"The idea is to use ",(0,i.kt)("inlineCode",{parentName:"p"},"\\p")," for new-line, on unix-like systems it will expand to ",(0,i.kt)("inlineCode",{parentName:"p"},"\\n")," (LF) and ",(0,i.kt)("inlineCode",{parentName:"p"},"\\r\\n")," (CRLF)."),(0,i.kt)("h2",{id:"character-literals"},"Character literals"),(0,i.kt)("p",null,"I really like single-quoted strings, idk why, but solutions to allow single-quoted strings in statically typed languages like prepending character literals with special token such as ",(0,i.kt)("inlineCode",{parentName:"p"},"s'This is a string'")," are awful.\nAnyway, Swift gift me an solution -- no character literals \ud83d\ude10.  Btw, Swift doesn't have single-quoted strings at all -- we will."),(0,i.kt)("p",null,"To infer that user assumed to use character instead of string we need to know types at first, thus, creating character becomes something run-time dependent \ud83e\udd14."))}d.isMDXComponent=!0}}]);