"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[9329],{3905:function(e,n,t){t.d(n,{Zo:function(){return m},kt:function(){return d}});var a=t(67294);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var l=a.createContext({}),p=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},m=function(e){var n=p(e.components);return a.createElement(l.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},u=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),u=p(t),d=i,f=u["".concat(l,".").concat(d)]||u[d]||c[d]||o;return t?a.createElement(f,r(r({ref:n},m),{},{components:t})):a.createElement(f,r({ref:n},m))}));function d(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var o=t.length,r=new Array(o);r[0]=u;var s={};for(var l in n)hasOwnProperty.call(n,l)&&(s[l]=n[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,r[1]=s;for(var p=2;p<o;p++)r[p]=t[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}u.displayName="MDXCreateElement"},26025:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var a=t(87462),i=t(63366),o=(t(67294),t(3905)),r=["components"],s={},l="References and move semantics",p={unversionedId:"particles/refs-&-moves",id:"particles/refs-&-moves",isDocsHomePage:!1,title:"References and move semantics",description:"This particle among the magnitude of others is about memory management in Jacy.",source:"@site/docs/particles/refs-&-moves.md",sourceDirName:"particles",slug:"/particles/refs-&-moves",permalink:"/dev-book/docs/particles/refs-&-moves",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/particles/refs-&-moves.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Arguments placement rules",permalink:"/dev-book/docs/particles/params-args-matching"},next:{title:"Soft keywords",permalink:"/dev-book/docs/particles/soft-keywords"}},m=[{value:"Move semantics bring references?",id:"move-semantics-bring-references",children:[],level:2},{value:"Simplify unless code dies",id:"simplify-unless-code-dies",children:[],level:2},{value:"PROBLEM",id:"problem",children:[],level:2},{value:"CONCLUSION",id:"conclusion",children:[],level:2}],c={toc:m};function u(e){var n=e.components,t=(0,i.Z)(e,r);return(0,o.kt)("wrapper",(0,a.Z)({},c,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"references-and-move-semantics"},"References and move semantics"),(0,o.kt)("p",null,"This particle among the magnitude of others is about memory management in ",(0,o.kt)("em",{parentName:"p"},"Jacy"),".\nHere I want to discuss one of the hardest questions I have about ",(0,o.kt)("em",{parentName:"p"},"Jacy"),' -- "Why references?"'),(0,o.kt)("p",null,"I want to have a language that I can use to develop high-level stuff as far as low level, mix them, and doing it as easily as possible.\nWhen these two worlds meet, many questions arise: working with memory directly requires opening memory management mechanisms to the user whereas high-level programming often hides it.\nThis is why so many languages exist: some aimed at general low-level programming, some to general high-level programming, even some aimed to work with a very specific domain like smart contracts.\n",(0,o.kt)("em",{parentName:"p"},"Jacy")," is a general-purpose programming language, and I have to say that it is a low-level PL.\nAnyway, I don't want to miss an approach that would make ",(0,o.kt)("em",{parentName:"p"},"Jacy")," more high-level and convenient to use."),(0,o.kt)("h2",{id:"move-semantics-bring-references"},"Move semantics bring references?"),(0,o.kt)("p",null,"Maybe it would sound weird but I want to logically describe one dilemma.\nI almost agreed with myself to make ",(0,o.kt)("em",{parentName:"p"},"Jacy")," more similar to Swift than Rust in the sense of memory management.\nSwift is ref/copy by default while Rust is move-by-default.\nWhat I want is move-by-default! And it is impossible to have both, default is one."),(0,o.kt)("p",null,"In my opinion, low-level programming with references as an option is better than low-level with references by default. Reference is an appendix mechanism even it is often used as the base of MM in many PLs.\nAlso, when you have the option to use references or not, you have more control over what are you doing."),(0,o.kt)("h2",{id:"simplify-unless-code-dies"},"Simplify unless code dies"),(0,o.kt)("p",null,"Rust is too explicit in my opinion, being well-designed PL, keeps you in shackles even when you're just trying to do something a little bit simpler than required. What am I talking about? Explicitness is good when we are talking about safety, etc. but it is not required when we're talking about code writing, however respectful."),(0,o.kt)("p",null,"Some things can be liberalized while saving all the safety rules in Rust.\nFor example: passing by reference. We have function signature, we know that function accepts reference (possibly) mutable, that is, we don't lose safety if not requiring the user to explicitly borrow value."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jc"},"// Some non-copy type\nstruct S {\n    field: int,\n}\n\nfunc foo(instance: &S) {\n    print(instance.field)\n}\n\nfunc main {\n    let s = S {field: 123};\n    \n    // This is how to do it in Rust\n    foo(&s);\n\n    // This is how to do it in Jacy\n    foo(s);\n}\n")),(0,o.kt)("p",null,"Rust version:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Comprehension is bipolar",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"In function ",(0,o.kt)("inlineCode",{parentName:"li"},"foo")," user knows that ",(0,o.kt)("inlineCode",{parentName:"li"},"S")," is a reference"),(0,o.kt)("li",{parentName:"ul"},"user cannot pass non-reference type to ",(0,o.kt)("inlineCode",{parentName:"li"},"foo")," thus needs to explicitly borrow it"))),(0,o.kt)("li",{parentName:"ul"},"User needs to explicitly borrow value, so code becomes noisier"),(0,o.kt)("li",{parentName:"ul"},"If a function has to look like it accepts any value (",(0,o.kt)("inlineCode",{parentName:"li"},"print")," for example) -- the user needs to write a macro that prepends ",(0,o.kt)("inlineCode",{parentName:"li"},"&")," for each argument")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"Jacy")," version:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Comprehension is linear: Code readers have to look for function ",(0,o.kt)("inlineCode",{parentName:"li"},"foo")," to know if it accepts reference, and cannot always see what is going in the code."),(0,o.kt)("li",{parentName:"ul"},"User does not need to always add ",(0,o.kt)("inlineCode",{parentName:"li"},"&")," to borrow value"),(0,o.kt)("li",{parentName:"ul"},"Functions like ",(0,o.kt)("inlineCode",{parentName:"li"},"print")," can be easily made without troubles with passing non-reference types while borrowing them")),(0,o.kt)("p",null,"At first, I need to say that I like the explicitness of Rust, anyway, I need to explain why I've chosen the implicit version.\nWhen you're writing a code, most of the moves you make are about \"working with values\" and \"passing values to functions which are already implemented\" (exaggerated).\nWhen you're implementing a function -- you think about what values it needs to accept and what to with these values.\nBut when you're implementing a function that uses already implemented one -- you rarely need to think if you're passing your values by reference or by value."),(0,o.kt)("p",null,"Let me describe what am talking about:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jc"},"struct S {\n    field: int,\n}\n\nfunc byRef(instance: &S) {\n    // Do something with reference\n}\n\nfunc byVal(instance: S) {\n    // Do something with value\n}\n\nfunc byMutRef(instance: &mut S) {\n    // Do some mutating stuff\n}\n\nfunc example1 {\n    let s = S {field: 123};\n\n    byRef(s);\n    byRef(s);\n    byMutRef(s);\n    byRef(s);\n\n    byVal(s);\n\n    // Oops... `s` is moved in call to `byVal`\n    // byRef();\n}\n\nfunc example2 {\n    let s = S {field: 123};\n\n    // \n    byRef(s);\n}\n")),(0,o.kt)("p",null,"What I want to show is that we don't lose the safety as we still have move semantics and borrowing rules. The only change is that now passing by reference is implicit for callee that is, as I think, not bad."),(0,o.kt)("p",null,"That all sounds good, but..."),(0,o.kt)("h2",{id:"problem"},"PROBLEM"),(0,o.kt)("p",null,"Yes, we don't lose the safety and Rustish semantics of reference passing, anyway, I missed something.\nUnlike C++, in Rust (and in ",(0,o.kt)("em",{parentName:"p"},"Jacy"),") ",(0,o.kt)("inlineCode",{parentName:"p"},"&T")," has different, more specific, semantics, that is, C++ operates on types and when you pass this type by reference it is not required to be pointer-like (as Rust does). C++ specification does not tell must implementation always use pointers to implement references, that is internal behavior is implementation-relative. This is why C++ does not specify an operator for creating a reference -- you cannot make a reference manually because the compiler could decide not to wrap reference to a pointer.\nIn ",(0,o.kt)("em",{parentName:"p"},"Jacy"),', as in Rust, reference is a "pointer with constraint" that are:'),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"References are always pointers, that is ",(0,o.kt)("inlineCode",{parentName:"li"},"T")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"&T"),", and can be thought of as ",(0,o.kt)("inlineCode",{parentName:"li"},"T")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"ReferenceOf<T>")),(0,o.kt)("li",{parentName:"ul"},"Reference always points to valid data",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"It cannot be null"),(0,o.kt)("li",{parentName:"ul"},"It cannot be a dangling pointer"))),(0,o.kt)("li",{parentName:"ul"},"References are strong - there's nothing like ",(0,o.kt)("inlineCode",{parentName:"li"},"void&")," respectively to ",(0,o.kt)("inlineCode",{parentName:"li"},"void*"))),(0,o.kt)("p",null,"Keeping this in mind some problems arise, like, ",(0,o.kt)("inlineCode",{parentName:"p"},"impl &T"),"."),(0,o.kt)("p",null,"Example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jc"},"struct S {}\n\nimpl SomeTrait for S {\n    func kek {}\n}\n\nimpl SomeTrait for &S {\n    func kek {}\n}\n\nfunc foo<T: SomeTrait>(st: T) {\n    st.kek();\n}\n\nfunc main {\n    let s = S {};\n\n    foo(s); // ???\n}\n")),(0,o.kt)("p",null,"We passed ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," to ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," which expects something implementing ",(0,o.kt)("inlineCode",{parentName:"p"},"SomeTrait"),", but ",(0,o.kt)("inlineCode",{parentName:"p"},"SomeTrait")," is implemented for both ",(0,o.kt)("inlineCode",{parentName:"p"},"S")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"&S"),", do we need to implicitly pass ",(0,o.kt)("inlineCode",{parentName:"p"},"s")," by reference?"),(0,o.kt)("p",null,'I would answer "No", as moving ',(0,o.kt)("inlineCode",{parentName:"p"},"s")," is nearly what the signature of function ",(0,o.kt)("inlineCode",{parentName:"p"},"foo")," specifies -- there is no ",(0,o.kt)("inlineCode",{parentName:"p"},"&")," for type ",(0,o.kt)("inlineCode",{parentName:"p"},"T"),", it is moved. Thus user needs to explicitly pass by reference."),(0,o.kt)("p",null,"So, this code will call ",(0,o.kt)("inlineCode",{parentName:"p"},"SomeTrait::kek(S)")," (without ",(0,o.kt)("inlineCode",{parentName:"p"},"&"),")."),(0,o.kt)("p",null,"User has to explicitly say that he wants to pass by reference (implicit pass does not exclude the existence of Rustish ",(0,o.kt)("inlineCode",{parentName:"p"},"&")," borrowing operator):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jc"},"func main {\n    let s = S {};\n\n    foo(&s);\n}\n")),(0,o.kt)("p",null,"Okay, the problem is solved? Actually, no. Let's look at a more difficult example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jc"},"struct S {}\n\nimpl SomeTrait for &S {\n    func kek {}\n}\n\nmod module {\n    impl SomeTrait for S {\n        func kek {}\n    }\n\n    pub func foo<T: SomeTrait>(s: T) {}\n}\n\nfunc main {\n    let s = S {};\n\n    module::foo(s);\n}\n")),(0,o.kt)("p",null,"What is ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," in ",(0,o.kt)("inlineCode",{parentName:"p"},"module::foo"),"? ",(0,o.kt)("inlineCode",{parentName:"p"},"&T")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"T"),"? The answer is the same as in the example above -- the best fit for this call is ",(0,o.kt)("inlineCode",{parentName:"p"},"T")," (without reference). Anyway, here, I want to show how difficult-to-read implicit pass-by-reference can be structured."),(0,o.kt)("h2",{id:"conclusion"},"CONCLUSION"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"STATUS")," - IDEA IS DENIED."),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"REVISIONS")," - ALLOWED"))}u.isMDXComponent=!0}}]);