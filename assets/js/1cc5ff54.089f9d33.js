"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[1200],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return f}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),s=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),d=s(r),f=o,m=d["".concat(c,".").concat(f)]||d[f]||p[f]||i;return r?n.createElement(m,a(a({ref:t},u),{},{components:r})):n.createElement(m,a({ref:t},u))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var s=2;s<i;s++)a[s]=r[s];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},37877:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return u},default:function(){return d}});var n=r(87462),o=r(63366),i=(r(67294),r(3905)),a=["components"],l={},c="HIR",s={unversionedId:"compiler-workflow/lowering/hir",id:"compiler-workflow/lowering/hir",isDocsHomePage:!1,title:"HIR",description:"Same as Rust (again...), yes, you really just can read about HIR in Rust docs as Jacy's HIR is almost the same, but I'll try to write a much more comprehensive description of HIR.",source:"@site/docs/compiler-workflow/lowering/hir.md",sourceDirName:"compiler-workflow/lowering",slug:"/compiler-workflow/lowering/hir",permalink:"/dev-book/docs/compiler-workflow/lowering/hir",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/compiler-workflow/lowering/hir.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"HIR Pretty printing",permalink:"/dev-book/docs/compiler-workflow/lowering/hir-pretty-print"},next:{title:"Lowering & HIR",permalink:"/dev-book/docs/compiler-workflow/lowering/index"}},u=[{value:"Identifiers",id:"identifiers",children:[],level:2},{value:"Lowering",id:"lowering",children:[],level:2}],p={toc:u};function d(e){var t=e.components,r=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"hir"},"HIR"),(0,i.kt)("p",null,"Same as Rust (again...), yes, you really just can read about HIR in ",(0,i.kt)("a",{parentName:"p",href:"https://rustc-dev-guide.rust-lang.org/hir.html"},"Rust docs")," as ",(0,i.kt)("em",{parentName:"p"},"Jacy"),"'s HIR is almost the same, but I'll try to write a much more comprehensive description of HIR.\n",(0,i.kt)("em",{parentName:"p"},"Jacy")," has HIR - High-level Intermediate Representation. It is an IR that contains a flattened version of AST, i.e. not in the structure of a tree but a collection of mappings from some identifiers to objects.\nFor example, you cannot access a child node from the parent node directly, every node that has children only contains a list of identifiers pointing to the children nodes. This is a convenient representation for type checking, etc. because we can walk through all specific items (e.g. all function bodies) to emit some logic on them."),(0,i.kt)("p",null,"The structure of HIR might seem to be confusing at first sight view, but it is not.\nThe AST produced by the parser is flattened into the collection of maps, e.g. there's a map of all function bodies, and that's all the executable code we have. If we need to walk through all function bodies, now we don't need to descend into the AST nodes ignoring nodes that not are function bodies.\nThe thing that differs HIR from AST is that HIR is made for \u2728programmers\u2728 but not just to represent user code, and the main point is that HIR is geared for type check."),(0,i.kt)("h2",{id:"identifiers"},"Identifiers"),(0,i.kt)("h2",{id:"lowering"},"Lowering"),(0,i.kt)("p",null,"Lowering is a process of converting some syntactically different structures to common structures."),(0,i.kt)("p",null,"E.g. all kinds of loops are converted to a ",(0,i.kt)("inlineCode",{parentName:"p"},"loop"),' structure because every loop is considered to "do something while\nsomething". That is, the ',(0,i.kt)("inlineCode",{parentName:"p"},"for")," loop iterates over data until there're some data, same for while and ",(0,i.kt)("inlineCode",{parentName:"p"},"while let"),"."),(0,i.kt)("p",null,"By doing so, we reduce a large amount of AST nodes to some more common structures."),(0,i.kt)("p",null,"More on lowering in the next chapter..."))}d.isMDXComponent=!0}}]);