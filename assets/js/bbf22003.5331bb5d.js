"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[2859],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),l=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),d=l(n),f=o,m=d["".concat(c,".").concat(f)]||d[f]||s[f]||a;return n?r.createElement(m,i(i({ref:t},u),{},{components:n})):r.createElement(m,i({ref:t},u))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=d;var p={};for(var c in t)hasOwnProperty.call(t,c)&&(p[c]=t[c]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var l=2;l<a;l++)i[l]=n[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7232:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return p},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return d}});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],p={},c="`not` prependent operator",l={unversionedId:"particles/not-prepedent-op",id:"particles/not-prepedent-op",isDocsHomePage:!1,title:"`not` prependent operator",description:"Briefly, the idea is to allow putting not operator before an infix operators.",source:"@site/docs/particles/not-prepedent-op.md",sourceDirName:"particles",slug:"/particles/not-prepedent-op",permalink:"/dev-book/docs/particles/not-prepedent-op",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/particles/not-prepedent-op.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Memory leaks",permalink:"/dev-book/docs/particles/memory-leaks"},next:{title:"Null coalesce",permalink:"/dev-book/docs/particles/null-coalesce"}},u=[],s={toc:u};function d(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"not-prependent-operator"},(0,a.kt)("inlineCode",{parentName:"h1"},"not")," prependent operator"),(0,a.kt)("p",null,"Briefly, the idea is to allow putting ",(0,a.kt)("inlineCode",{parentName:"p"},"not")," operator before an infix operators.\nIt would allow us not to define new operators like ",(0,a.kt)("inlineCode",{parentName:"p"},"notin")," or separately parse ",(0,a.kt)("inlineCode",{parentName:"p"},"not in")," as special case."),(0,a.kt)("p",null,"So, it would look like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-jc"},"a not in b\n// Becomes\nnot (a in b)\n")),(0,a.kt)("p",null,"I'm not sure, but think that there won't be any troubles with precedence, as expressions are already parsed, and then transformed."))}d.isMDXComponent=!0}}]);