"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[9960],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return u}});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),u=o,f=m["".concat(s,".").concat(u)]||m[u]||d[u]||r;return n?a.createElement(f,i(i({ref:t},p),{},{components:n})):a.createElement(f,i({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},40109:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return c},toc:function(){return p},default:function(){return m}});var a=n(87462),o=n(63366),r=(n(67294),n(3905)),i=["components"],l={},s="Code testing tool",c={unversionedId:"ideas/code-testing-tool",id:"ideas/code-testing-tool",isDocsHomePage:!1,title:"Code testing tool",description:"This is mostly not just an idea but a task description, I want a tool that allows checking for errors with annotations in comments.",source:"@site/docs/ideas/code-testing-tool.md",sourceDirName:"ideas",slug:"/ideas/code-testing-tool",permalink:"/dev-book/docs/ideas/code-testing-tool",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/ideas/code-testing-tool.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Code Style Conventions",permalink:"/dev-book/docs/ideas/code-style-conventions"},next:{title:"Ideas",permalink:"/dev-book/docs/ideas/index"}},p=[{value:"What features do I want",id:"what-features-do-i-want",children:[{value:"Spanned error",id:"spanned-error",children:[{value:"Implementation problem",id:"implementation-problem",children:[],level:4}],level:3}],level:2},{value:"Implementation specification",id:"implementation-specification",children:[{value:"Collecting ascriptions",id:"collecting-ascriptions",children:[],level:3}],level:2}],d={toc:p};function m(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"code-testing-tool"},"Code testing tool"),(0,r.kt)("p",null,"This is mostly not just an idea but a task description, I want a tool that allows checking for errors with annotations in comments."),(0,r.kt)("p",null,"Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jc"},"enum Enumeration // message:error 'Expected `enum` body'\n")),(0,r.kt)("p",null,"This tool would be really helpful for parser testing, by the way, it might be suitable for type check, etc.\nBut let's focus on parsing first."),(0,r.kt)("h2",{id:"what-features-do-i-want"},"What features do I want"),(0,r.kt)("p",null,"At first, I need to decide what properties of messages (error, warn, etc.) must be required in test comments.\nFor now (and ",(0,r.kt)("inlineCode",{parentName:"p"},"Message")," structure might be extended in the future) ",(0,r.kt)("inlineCode",{parentName:"p"},"Message")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"Label")," are structured as:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c++"},"struct Label {\n    Kind kind; // Primary/Help/Aux\n    Span span; // Span of the label\n    std::string text; // Label text\n}\n\nstruct Message {\n    Kind kind; // Error/Warn/None\n    std::string text; // Text of the message\n    EID eid; // Explanation identifier\n    Option<Label> primaryLabel; // Primary label of the message\n    Label::List labels; // Additional labels\n}\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"I think that checking only text of a message would be enough, so we can through away label checks, as we want to check if an error appears but not how we described it."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Message::Kind")," already defined in the syntax ",(0,r.kt)("inlineCode",{parentName:"li"},"message:{{kind}}"),", it is required."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"Message::EID"),' should be optional as I think, like "more specific check". So we can add kind of an annotation for it, e.g. ',(0,r.kt)("inlineCode",{parentName:"li"},"message:error 'Expected `enum` body' @EID:123"),".")),(0,r.kt)("p",null,"As we already have a syntax for ",(0,r.kt)("inlineCode",{parentName:"p"},"EID")," annotation then we can use it for all annotations, e.g. for spans. This will give are concise and extensible syntax for message properties."),(0,r.kt)("p",null,"That's all \ud83c\udfc1"),(0,r.kt)("h3",{id:"spanned-error"},"Spanned error"),(0,r.kt)("p",null,"In the example above I just wrote an error with some text, but it would be nice to be able to check the position of the error too.\nSpan syntax, as for ",(0,r.kt)("inlineCode",{parentName:"p"},"EID"),", is written as an annotation ",(0,r.kt)("inlineCode",{parentName:"p"},"@at{16}"),' meaning "at 16 symbol place" or ',(0,r.kt)("inlineCode",{parentName:"p"},"@at{16-17}"),' meaning "from 16 to 17 symbol place".'),(0,r.kt)("h4",{id:"implementation-problem"},"Implementation problem"),(0,r.kt)("p",null,"Span in ",(0,r.kt)("em",{parentName:"p"},"Jacy"),' compiler stored as a position and length (meaning "from char C with length L"), and it might be tricky to convert all the spans to the "line:number" form.'),(0,r.kt)("h2",{id:"implementation-specification"},"Implementation specification"),(0,r.kt)("h3",{id:"collecting-ascriptions"},"Collecting ascriptions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"We go through the whole file AST and collect comments which starts with ",(0,r.kt)("inlineCode",{parentName:"li"},"message:")," and save them."),(0,r.kt)("li",{parentName:"ol"},"If some of the comments have ",(0,r.kt)("inlineCode",{parentName:"li"},"@at")," attribute, we set a specific span for them."),(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"@at")," attribute only specifies by-char position, we set current line (line where at the end of which comment is placed) number for it."),(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"@at"),' has at least line number specified, we do nothing with it and then, at the check stage, look at it as "an error at line N"'),(0,r.kt)("li",{parentName:"ol"})))}m.isMDXComponent=!0}}]);