"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[5904],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return f}});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=c(n),f=o,m=d["".concat(l,".").concat(f)]||d[f]||u[f]||i;return n?r.createElement(m,a(a({ref:t},p),{},{components:n})):r.createElement(m,a({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},7878:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return p},default:function(){return d}});var r=n(7462),o=n(3366),i=(n(7294),n(3905)),a=["components"],s={},l="Soft keywords",c={unversionedId:"particles/soft-keywords",id:"particles/soft-keywords",isDocsHomePage:!1,title:"Soft keywords",description:'This is a list of keywords that seem to be possible to make "soft".',source:"@site/docs/particles/soft-keywords.md",sourceDirName:"particles",slug:"/particles/soft-keywords",permalink:"/dev-book/docs/particles/soft-keywords",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/particles/soft-keywords.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"References and move semantics",permalink:"/dev-book/docs/particles/refs-&-moves"},next:{title:"`std` annotations",permalink:"/dev-book/docs/particles/std-annotations"}},p=[{value:"<code>init</code>",id:"init",children:[{value:"Problems",id:"problems",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"soft-keywords"},"Soft keywords"),(0,i.kt)("p",null,'This is a list of keywords that seem to be possible to make "soft".'),(0,i.kt)("blockquote",null,(0,i.kt)("p",{parentName:"blockquote"},'"soft" keyword means that it is possible to use it as an identifier in most places, anyway they\'re reserved for certain situations.\nSometimes, "soft" keywords are not matched as keywords unless syntax is proper, these soft-keywords are soften.')),(0,i.kt)("p",null,"For now, I'll leave all keywords hard, as syntax often changes, thus there would be some conflicts."),(0,i.kt)("h2",{id:"init"},(0,i.kt)("inlineCode",{parentName:"h2"},"init")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"init")," keyword is used for initializers (constructors), and syntax is following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},"init() {\n    // ...\n}\n")),(0,i.kt)("p",null,"Same as function item but without ",(0,i.kt)("inlineCode",{parentName:"p"},"func")," keyword. Absence of ",(0,i.kt)("inlineCode",{parentName:"p"},"func")," keyword gives us opportunity to softly check for ",(0,i.kt)("inlineCode",{parentName:"p"},"init")," keyword.\n",(0,i.kt)("inlineCode",{parentName:"p"},"init")," is an item, thus only appears on item-only level (in structures), so it is possible to check if it's an initializer but not a function call."),(0,i.kt)("h3",{id:"problems"},"Problems"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Requires context-dependent parsing, as we need to check for ",(0,i.kt)("inlineCode",{parentName:"li"},"init")," appearance only inside ",(0,i.kt)("inlineCode",{parentName:"li"},"struct")," (maybe ",(0,i.kt)("inlineCode",{parentName:"li"},"trait"),") but not in ",(0,i.kt)("inlineCode",{parentName:"li"},"func")," (expression context)")))}d.isMDXComponent=!0}}]);