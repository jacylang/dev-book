"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[9284],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},m=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),d=s(n),k=l,c=d["".concat(p,".").concat(k)]||d[k]||u[k]||i;return n?a.createElement(c,r(r({ref:t},m),{},{components:n})):a.createElement(c,r({ref:t},m))}));function k(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var i=n.length,r=new Array(i);r[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:l,r[1]=o;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},1814:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return s},toc:function(){return m},default:function(){return d}});var a=n(87462),l=n(63366),i=(n(67294),n(3905)),r=["components"],o={sidebar_position:2,title:"How To Run"},p="How to run",s={unversionedId:"how-to-run",id:"how-to-run",isDocsHomePage:!1,title:"How To Run",description:"Basic usage",source:"@site/docs/how-to-run.md",sourceDirName:".",slug:"/how-to-run",permalink:"/dev-book/docs/how-to-run",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/how-to-run.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"How To Run"},sidebar:"tutorialSidebar",previous:{title:"Jacy DevBook",permalink:"/dev-book/docs/index"},next:{title:"Goal",permalink:"/dev-book/docs/concept/goal"}},m=[{value:"Basic usage",id:"basic-usage",children:[{value:"The actual list of options",id:"the-actual-list-of-options",children:[{value:"Key-value options",id:"key-value-options",children:[],level:4},{value:"Boolean options",id:"boolean-options",children:[{value:"Explicit Boolean option value",id:"explicit-boolean-option-value",children:[],level:5}],level:4}],level:3}],level:2}],u={toc:m};function d(e){var t=e.components,n=(0,l.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"how-to-run"},"How to run"),(0,i.kt)("h2",{id:"basic-usage"},"Basic usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./jc (.exe for windows) [source files] --boolean-argument -key-value-argument=param1, param2, ..., paramN\n")),(0,i.kt)("p",null,"There're two kinds of CLI arguments:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Boolean, that is, just a flag"),(0,i.kt)("li",{parentName:"ul"},"Key-value that receive parameters")),(0,i.kt)("p",null,"Also, arguments have constraints:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Non-existent arguments leads to an error"),(0,i.kt)("li",{parentName:"ul"},"For key-value arguments: count of arguments (maybe any count) and allowed parameters (what you are able to write after\n",(0,i.kt)("inlineCode",{parentName:"li"},"="),")"),(0,i.kt)("li",{parentName:"ul"},"Dependencies. It means that some arguments are not allowed if another argument is not set, e.g. you cannot use\n",(0,i.kt)("inlineCode",{parentName:"li"},"--compile-depth")," (it controls how deep will compilation process go by workflow) without setting the ",(0,i.kt)("inlineCode",{parentName:"li"},"--dev")," argument.")),(0,i.kt)("p",null,"Example usage."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"./bin example.jc --print=ast\n")),(0,i.kt)("h3",{id:"the-actual-list-of-options"},"The actual list of options"),(0,i.kt)("h4",{id:"key-value-options"},"Key-value options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--dev-print")," - (any count of parameters) - Development option that enables printing of representations of some structures on different compilation stages:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"suggestions")," - Prints suggestions as non-formatted text for each stage."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"summary")," - Prints summary table after when compilation completes (even with error)."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"dir-tree")," - Prints directory tree where root file is placed, so we can check which files will be compiled"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"source")," - Prints source for each file will be compiled"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"tokens")," - Prints token stream (each on a new line) with position and length"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ast")," - Prints source code from the view of AST (does not actually print AST as a tree)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ast-node-map")," - (Ignores ",(0,i.kt)("inlineCode",{parentName:"li"},"ast")," argument if passed) - Prints AST in the same way as ",(0,i.kt)("inlineCode",{parentName:"li"},"--dev-print=ast")," by also appending node id after each AST node."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ast-names")," - Prints AST with color markers (connections to names) after name resolution."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mod-tree")," - Prints Module-Tree which, i.e. tree of items defined in scope tree."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ribs")," - Prints ribs, i.e. scopes for local variables."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"definitions")," - Prints definition list."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"resolutions")," - Prints resolution list."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"all")," - prints everything described above"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--log-level")," - (1 parameter; default: ",(0,i.kt)("inlineCode",{parentName:"li"},"info"),") - Global log level. The level is checked by precedence where ",(0,i.kt)("inlineCode",{parentName:"li"},"dev")," has the lowest one and ",(0,i.kt)("inlineCode",{parentName:"li"},"error")," the higher.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"debug")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"info")," - (Default)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"warn")," - (Don't confuse with warnings in the context of suggestions)"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"error")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--lexer-log-level")," - (1 parameter) - Lexer log level",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"(Same parameters as in ",(0,i.kt)("inlineCode",{parentName:"li"},"-log-level"),")"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--parser-log-level")," - (1 parameter) - Parser log level",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"(Same parameters as in ",(0,i.kt)("inlineCode",{parentName:"li"},"-log-level"),")"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--name-resolver-log-level")," - (1 parameter) - NameResolver log level",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"(Same parameters as in ",(0,i.kt)("inlineCode",{parentName:"li"},"-log-level"),")"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--compile-depth")," - (1 parameter, depends on ",(0,i.kt)("inlineCode",{parentName:"li"},"dev"),") - controls how deep will compilation process go by workflow (each\nnext argument implicitly includes all previous arguments):",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parser")," - stops after parsing files"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name-resolution")," - stops after name resolution"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--dev-stages")," - (multiple parameters) - Enables dev-mode for specific stages, includes logs and additional info.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lexer")," - Lexing stage"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parser")," - Parser stage"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name-res"),' - Name resolution stage (includes "module tree building", "importation" and "name resolution")'),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lowering")," - Lowering stage"))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--dev-log")," - Enables development logs for specific objects and storages.",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lexer")," - Enable dev logs for ",(0,i.kt)("inlineCode",{parentName:"li"},"Lexer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"parser")," - Enable dev logs for ",(0,i.kt)("inlineCode",{parentName:"li"},"Parser")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"mod-tree-builder")," - Enable dev logs for ",(0,i.kt)("inlineCode",{parentName:"li"},"ModuleTreeBuilder")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"importer")," - Enable dev logs for ",(0,i.kt)("inlineCode",{parentName:"li"},"Importer")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"name-resolver")," - Enable dev logs for ",(0,i.kt)("inlineCode",{parentName:"li"},"NameResolver")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"lowering")," - Enable dev logs for ",(0,i.kt)("inlineCode",{parentName:"li"},"Lowering")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--parser-extra-debug")," (depends on ",(0,i.kt)("inlineCode",{parentName:"li"},"dev"),") - enables additional debug logs in parser",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"no")," - (default) - No extra debug info"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"entries")," - Prints what syntax units parser enters and leave"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"all")," - Prints ",(0,i.kt)("inlineCode",{parentName:"li"},"entries")," and also special much info about skipping, etc.")))),(0,i.kt)("details",null,(0,i.kt)("summary",null,"Toggle key-value option arguments"),(0,i.kt)("blockquote",null,"If you want to disable specific argument of key-value option, e.g. passing `--dev-print=all` to exclude `tokens` you need to write `--dev-print all=no` or `--dev-print=all=no`, but first form is more readable. You can use any boolean value to toggle arguments, allowed boolean values described below.")),(0,i.kt)("h4",{id:"boolean-options"},"Boolean options"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--dev")," - enables dev mode: all logs will be printed including ",(0,i.kt)("inlineCode",{parentName:"li"},"dev"),"-level logs and new logs will be added. Generally just produces more debug info everywhere."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"--dev-full")," - (depends on ",(0,i.kt)("inlineCode",{parentName:"li"},"--dev"),") - Enable all development logs and (maybe) some additional info emitting. You still can disable something using specific option, e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"--dev-full --dev-print source=no"),". ",(0,i.kt)("inlineCode",{parentName:"li"},"--dev-full"),' does not enable "extra" options like ',(0,i.kt)("inlineCode",{parentName:"li"},"--parser-extra-debug"),".")),(0,i.kt)("h5",{id:"explicit-boolean-option-value"},"Explicit Boolean option value"),(0,i.kt)("p",null,"What if you want to set bool-arg to ",(0,i.kt)("inlineCode",{parentName:"p"},"false"),"? Let's imagine that ",(0,i.kt)("inlineCode",{parentName:"p"},"--dev")," is set by default (it is not anyway). There is\nthe pretty same syntax for bool-args as for key-value args."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"--dev=no\n")),(0,i.kt)("p",null,"There's a bunch of allowed bool values:"),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:"left"},"(Truthy)"),(0,i.kt)("th",{parentName:"tr",align:"left"},"(Falsy)"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"yes"),(0,i.kt)("td",{parentName:"tr",align:"left"},"no")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"y"),(0,i.kt)("td",{parentName:"tr",align:"left"},"n")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"true"),(0,i.kt)("td",{parentName:"tr",align:"left"},"false")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"1"),(0,i.kt)("td",{parentName:"tr",align:"left"},"0")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:"left"},"on"),(0,i.kt)("td",{parentName:"tr",align:"left"},"off")))),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"This values are case insensitive, so you are able to write ",(0,i.kt)("inlineCode",{parentName:"em"},"Y")," or ",(0,i.kt)("inlineCode",{parentName:"em"},"tRue")," or ",(0,i.kt)("inlineCode",{parentName:"em"},"False"),", etc."),"."))}d.isMDXComponent=!0}}]);