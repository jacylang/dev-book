"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[3778],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(n),m=r,f=d["".concat(c,".").concat(m)]||d[m]||u[m]||i;return n?a.createElement(f,o(o({ref:t},p),{},{components:n})):a.createElement(f,o({ref:t},p))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=d;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},26822:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return s},toc:function(){return p},default:function(){return d}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),o=["components"],l={},c="Goal",s={unversionedId:"concept/goal",id:"concept/goal",isDocsHomePage:!1,title:"Goal",description:"This is a list of features and examples I wish would be possible in Jacy.",source:"@site/docs/concept/goal.md",sourceDirName:"concept",slug:"/concept/goal",permalink:"/dev-book/docs/concept/goal",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/concept/goal.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"How To Run",permalink:"/dev-book/docs/how-to-run"},next:{title:"The Idea",permalink:"/dev-book/docs/concept/the-idea"}},p=[{value:"Main features",id:"main-features",children:[{value:"<em>Jacy</em> is safe",id:"jacy-is-safe",children:[],level:3},{value:"References",id:"references",children:[],level:3},{value:"Non-Copy types are passed by reference",id:"non-copy-types-are-passed-by-reference",children:[],level:3},{value:"<em>Jacy</em> supports structural sub-typing with tuples",id:"jacy-supports-structural-sub-typing-with-tuples",children:[],level:3}],level:2},{value:"<em>Jacy</em> is functional",id:"jacy-is-functional",children:[{value:"Pattern matching",id:"pattern-matching",children:[{value:"It is possible to ignore non-important fields",id:"it-is-possible-to-ignore-non-important-fields",children:[],level:4},{value:"Matched expression can be borrowed",id:"matched-expression-can-be-borrowed",children:[],level:4}],level:3},{value:"Lambdas (closures)",id:"lambdas-closures",children:[],level:3},{value:"Pipeline operator",id:"pipeline-operator",children:[],level:3},{value:"<em>Jacy</em> is Object-Oriented",id:"jacy-is-object-oriented",children:[{value:"<em>Jacy</em> respects composition over inheritance",id:"jacy-respects-composition-over-inheritance",children:[],level:4},{value:"Struct implementations can be extended",id:"struct-implementations-can-be-extended",children:[],level:4}],level:3},{value:"No GC",id:"no-gc",children:[],level:3},{value:"<em>Jacy</em> respects Compile-Time Evaluation",id:"jacy-respects-compile-time-evaluation",children:[],level:3}],level:2}],u={toc:p};function d(e){var t=e.components,n=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"goal"},"Goal"),(0,i.kt)("p",null,"This is a list of features and examples I wish would be possible in ",(0,i.kt)("em",{parentName:"p"},"Jacy"),"."),(0,i.kt)("h2",{id:"main-features"},"Main features"),(0,i.kt)("h3",{id:"jacy-is-safe"},(0,i.kt)("em",{parentName:"h3"},"Jacy")," is safe"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("em",{parentName:"li"},"Jacy")," follows Rust' borrowing rules")),(0,i.kt)("h3",{id:"references"},"References"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},"let a = 123;\nlet b = &a; // Borrow `a`\n\nlet mut value = 0;\nlet bor = &mut value;\n*bor = 1000;\nprint(value); // Prints `1000`\n")),(0,i.kt)("h3",{id:"non-copy-types-are-passed-by-reference"},"Non-Copy types are passed by reference"),(0,i.kt)("h3",{id:"jacy-supports-structural-sub-typing-with-tuples"},(0,i.kt)("em",{parentName:"h3"},"Jacy")," supports structural sub-typing with tuples"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},'let t = ("abcdef", 2.0, 123);\n\nfunc foo(tup: (str, float, int));\n')),(0,i.kt)("h2",{id:"jacy-is-functional"},(0,i.kt)("em",{parentName:"h2"},"Jacy")," is functional"),(0,i.kt)("h3",{id:"pattern-matching"},"Pattern matching"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},"let a = (1, 2, 3);\nlet (f, s, t) = a;\n\nmatch a {\n    (f, s, t) => // Do something with `f`, `s` and `t`\n}\n")),(0,i.kt)("h4",{id:"it-is-possible-to-ignore-non-important-fields"},"It is possible to ignore non-important fields"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},"match a {\n    (f, ...) => // Do something with `f` only\n}\n")),(0,i.kt)("h4",{id:"matched-expression-can-be-borrowed"},"Matched expression can be borrowed"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},"match a {\n    (ref f, ...) => // Do something with `f` as reference to `a.0`\n}\n")),(0,i.kt)("h3",{id:"lambdas-closures"},"Lambdas (closures)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},"let l = x -> x * 2;\nprint(l(2)); // 4\n")),(0,i.kt)("h3",{id:"pipeline-operator"},"Pipeline operator"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},"2 |> l |> print; // 4\n")),(0,i.kt)("h3",{id:"jacy-is-object-oriented"},(0,i.kt)("em",{parentName:"h3"},"Jacy")," is Object-Oriented"),(0,i.kt)("p",null,"Claiming that OOP means that PL has structures containing data and methods -- ",(0,i.kt)("em",{parentName:"p"},"Jacy")," is OOP language."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},"struct A {\n    field: i32,\n}\n\nimpl A {\n    func foo {\n        print(self.field);\n    }\n}\n")),(0,i.kt)("h4",{id:"jacy-respects-composition-over-inheritance"},(0,i.kt)("em",{parentName:"h4"},"Jacy")," respects composition over inheritance"),(0,i.kt)("h4",{id:"struct-implementations-can-be-extended"},"Struct implementations can be extended"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},"struct A {\n    field: i32,\n}\n\nfunc A::foo {\n    print(self.field);\n}\n")),(0,i.kt)("h3",{id:"no-gc"},"No GC"),(0,i.kt)("p",null,"Jacy doesn't have Garbage Collector, as far as it is statically sets ",(0,i.kt)("inlineCode",{parentName:"p"},"free")," points."),(0,i.kt)("h3",{id:"jacy-respects-compile-time-evaluation"},(0,i.kt)("em",{parentName:"h3"},"Jacy")," respects Compile-Time Evaluation"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jc"},'const a = 123;\n\nconst func fib(n: i32): u64 = match n {\n    i32::MIN..=0 => panic("`n` is negative or zero"),\n    1 | 2 => 1,\n    3 => 2,\n    _ => fib(n - 1) + fib(n - 2),\n}\n\nfunc main {\n    const fib100 = fib(100); // 100 fibonacci number computed at compile-time\n    print(fib100);\n}\n')))}d.isMDXComponent=!0}}]);