"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[1279],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),p=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=p(n),m=i,k=c["".concat(s,".").concat(m)]||c[m]||d[m]||r;return n?a.createElement(k,l(l({ref:t},u),{},{components:n})):a.createElement(k,l({ref:t},u))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},31355:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return u},default:function(){return c}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),l=["components"],o={},s="Lambdas syntax",p={unversionedId:"particles/syntax-decisions/lambdas",id:"particles/syntax-decisions/lambdas",isDocsHomePage:!1,title:"Lambdas syntax",description:"Oh, I fight with lambdas syntax so long, actually still doing this. The problem could be easily solved, just by using",source:"@site/docs/particles/syntax-decisions/lambdas.md",sourceDirName:"particles/syntax-decisions",slug:"/particles/syntax-decisions/lambdas",permalink:"/dev-book/docs/particles/syntax-decisions/lambdas",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/particles/syntax-decisions/lambdas.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Syntax Decisions",permalink:"/dev-book/docs/particles/syntax-decisions/index"},next:{title:"Range Operators",permalink:"/dev-book/docs/particles/syntax-decisions/range-operators"}},u=[{value:"Idea #1 &quot;Stupid&quot;",id:"idea-1-stupid",children:[],level:2},{value:"Idea #2 &quot;Rust syntax&quot;",id:"idea-2-rust-syntax",children:[],level:2},{value:"Idea #3 &quot;Full inference&quot;",id:"idea-3-full-inference",children:[],level:2},{value:"Idea #4 &quot;Solving conflicts&quot;",id:"idea-4-solving-conflicts",children:[],level:2},{value:"Idea #5 &quot;Haskell-like&quot;",id:"idea-5-haskell-like",children:[],level:2}],d={toc:u};function c(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lambdas-syntax"},"Lambdas syntax"),(0,r.kt)("p",null,"Oh, I fight with lambdas syntax so long, actually still doing this. The problem could be easily solved, just by using\nRust' syntax ",(0,r.kt)("inlineCode",{parentName:"p"},"|...| expr"),". It does not confuse me much, btw I would like to make lambda parameter list cleaner with some\nkind of opening delimiter and closing one."),(0,r.kt)("p",null,"To memorize the process of brain-storm, I'd like to describe the flow."),(0,r.kt)("h2",{id:"idea-1-stupid"},'Idea #1 "Stupid"'),(0,r.kt)("p",null,"The first idea was to use ",(0,r.kt)("inlineCode",{parentName:"p"},"(p1, p2, ..., pN) -> expr")," syntax, but it does not play well with tuple syntax. This is\nbecause each parameter is not just an identifier -- it is a pattern. I insist on lambda parameters to be patterns as\nfunction parameters do, to be consistent. Also, the problem is that when we have required ",(0,r.kt)("inlineCode",{parentName:"p"},"->")," we not allowed to\nunambiguously parse return type of lambda, this could be solved with ",(0,r.kt)("inlineCode",{parentName:"p"},"(): returnType -> expr")," actually."),(0,r.kt)("h2",{id:"idea-2-rust-syntax"},'Idea #2 "Rust syntax"'),(0,r.kt)("p",null,"JUST USE RUST SYNTAX."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Is solves problems with return type"),(0,r.kt)("li",{parentName:"ul"},"It is LL parsable"),(0,r.kt)("li",{parentName:"ul"},"It solves problems with pattern matching in parameters")),(0,r.kt)("p",null,'But as I wrote above, I want opening and closing delimiter in lambda parameters. This Ruby-like syntax looks like\n"capture something...".'),(0,r.kt)("h2",{id:"idea-3-full-inference"},'Idea #3 "Full inference"'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"(p1, ..., pN) -> expr\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"No type annotations and full inference")),(0,r.kt)("p",null,"This one is very simple, but won't work as far as ",(0,r.kt)("em",{parentName:"p"},"Jacy")," does not support parameters types inference."),(0,r.kt)("h2",{id:"idea-4-solving-conflicts"},'Idea #4 "Solving conflicts"'),(0,r.kt)("p",null,"The idea is to parse ",(0,r.kt)("inlineCode",{parentName:"p"},"(...)")," to some non-AST structure -- NamedList, where each element in list is ",(0,r.kt)("inlineCode",{parentName:"p"},"TokenList: type"),". If\nwe encounter a ",(0,r.kt)("inlineCode",{parentName:"p"},"->")," after ",(0,r.kt)("inlineCode",{parentName:"p"},")")," -- we parse each ",(0,r.kt)("inlineCode",{parentName:"p"},"TokenList")," as pattern and continuing as lambda parsing. If there's no\n",(0,r.kt)("inlineCode",{parentName:"p"},"->")," we parse ",(0,r.kt)("inlineCode",{parentName:"p"},"TokenList")," as expression and report errors if it is an invalid expression or ",(0,r.kt)("inlineCode",{parentName:"p"},"type")," exists (tuples cannot\nhave types in expression)."),(0,r.kt)("p",null,"Pros:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Opening and closing delimiters"),(0,r.kt)("li",{parentName:"ul"},"We have ",(0,r.kt)("inlineCode",{parentName:"li"},"(...) -> expr")," syntax")),(0,r.kt)("p",null,"Cons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Hacking parser is not a good idea for WIP project, like early optimizations."),(0,r.kt)("li",{parentName:"ul"},"Large Parser updates (we need to allow handling separate token stream).")),(0,r.kt)("h2",{id:"idea-5-haskell-like"},'Idea #5 "Haskell-like"'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-plaintext"},"\\(p1: type, ..., pN: type): type -> expr\n")),(0,r.kt)("p",null,"Pros:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Opening and closing delimiters"),(0,r.kt)("li",{parentName:"ul"},"No conflicts and easy LL parsing")),(0,r.kt)("p",null,"Cons:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We have ",(0,r.kt)("inlineCode",{parentName:"li"},"\\")," syntax \ud83d\ude1e"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"->")," is required so return type syntax is ",(0,r.kt)("inlineCode",{parentName:"li"},"(...): type"))),(0,r.kt)("p",null,"Also, this syntax allows simplifications:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We can allow ",(0,r.kt)("inlineCode",{parentName:"li"},"IDENT -> expr")," as a shortcut for ",(0,r.kt)("inlineCode",{parentName:"li"},"BorrowPattern(IDENT) -> expr"))))}c.isMDXComponent=!0}}]);