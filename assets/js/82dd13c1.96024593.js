"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[999],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return m}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),u=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=u(e.components);return i.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,k=d["".concat(p,".").concat(m)]||d[m]||c[m]||r;return n?i.createElement(k,l(l({ref:t},s),{},{components:n})):i.createElement(k,l({ref:t},s))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=d;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<r;u++)l[u]=n[u];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5920:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return o},contentTitle:function(){return p},metadata:function(){return u},toc:function(){return s},default:function(){return d}});var i=n(7462),a=n(3366),r=(n(7294),n(3905)),l=["components"],o={},p="JON files",u={unversionedId:"appendices/jon-files/index",id:"appendices/jon-files/index",isDocsHomePage:!1,title:"JON files",description:"JON (Jacy Object Notation, ext.: .jon) is an alternative for JSON used by Jacy programming language.",source:"@site/docs/appendices/jon-files/index.md",sourceDirName:"appendices/jon-files",slug:"/appendices/jon-files/index",permalink:"/dev-book/docs/appendices/jon-files/index",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/appendices/jon-files/index.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Name Resolution Cheatsheet",permalink:"/dev-book/docs/appendices/cheatsheets/name-resolution-cheatsheet"},next:{title:"Spec",permalink:"/dev-book/docs/appendices/spec/index"}},s=[{value:"Basic properties",id:"basic-properties",children:[{value:"Root type",id:"root-type",children:[],level:3}],level:2},{value:"Data types",id:"data-types",children:[{value:"Numeric data types",id:"numeric-data-types",children:[],level:3}],level:2}],c={toc:s};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"jon-files"},"JON files"),(0,r.kt)("p",null,"JON (Jacy Object Notation, ext.: ",(0,r.kt)("inlineCode",{parentName:"p"},".jon"),") is an alternative for JSON used by ",(0,r.kt)("em",{parentName:"p"},"Jacy")," programming language.\nIts goals are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Simpler and less noisy syntax"),(0,r.kt)("li",{parentName:"ul"},"Data referencing")),(0,r.kt)("h2",{id:"basic-properties"},"Basic properties"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"JON is case-sensitive, it this rule is applied to keywords too")),(0,r.kt)("h3",{id:"root-type"},"Root type"),(0,r.kt)("p",null,"JON does not support root type specification as JSON does, there's no root ",(0,r.kt)("inlineCode",{parentName:"p"},"{}")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"[]"),", and a JON file is always an object."),(0,r.kt)("h2",{id:"data-types"},"Data types"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"null")," (non-value)"),(0,r.kt)("li",{parentName:"ul"},"Boolean - ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),"/",(0,r.kt)("inlineCode",{parentName:"li"},"false")),(0,r.kt)("li",{parentName:"ul"},"Integer",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Decimal - ",(0,r.kt)("inlineCode",{parentName:"li"},"123")),(0,r.kt)("li",{parentName:"ul"},"Hexadecimal - ",(0,r.kt)("inlineCode",{parentName:"li"},"0xB16B00B5")),(0,r.kt)("li",{parentName:"ul"},"Octal - ",(0,r.kt)("inlineCode",{parentName:"li"},"0o774")),(0,r.kt)("li",{parentName:"ul"},"Binary - ",(0,r.kt)("inlineCode",{parentName:"li"},"0b110011001")))),(0,r.kt)("li",{parentName:"ul"},"Floating-point numbers",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Raw - ",(0,r.kt)("inlineCode",{parentName:"li"},"0.1523")),(0,r.kt)("li",{parentName:"ul"},"With exponential notation - ",(0,r.kt)("inlineCode",{parentName:"li"},"0.123213e-123")))),(0,r.kt)("li",{parentName:"ul"},"Strings",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"One line - ",(0,r.kt)("inlineCode",{parentName:"li"},"'Hello, world!'")," and ",(0,r.kt)("inlineCode",{parentName:"li"},'"Hello, world!"')," are same"),(0,r.kt)("li",{parentName:"ul"},"Multi-line - ",(0,r.kt)("inlineCode",{parentName:"li"},"'''My multiline string'''")," and ",(0,r.kt)("inlineCode",{parentName:"li"},'"""My multiline string"""')," are same"))),(0,r.kt)("li",{parentName:"ul"},"Arrays",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Collection of values enclosed into ",(0,r.kt)("inlineCode",{parentName:"li"},"[]")," and delimited with ",(0,r.kt)("inlineCode",{parentName:"li"},",")," (optionally, read further)"),(0,r.kt)("li",{parentName:"ul"},"Arrays are heterogeneous"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[1, 'Some text here', null, true]")))),(0,r.kt)("li",{parentName:"ul"},"Objects",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"Collection of key-value pairs enclosed into ",(0,r.kt)("inlineCode",{parentName:"li"},"{}")," and delimited by ",(0,r.kt)("inlineCode",{parentName:"li"},",")," (optionally, read further)"),(0,r.kt)("li",{parentName:"ul"},"Each pair is ",(0,r.kt)("inlineCode",{parentName:"li"},"key: value")," where",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"key")," is any text and does not require being enclosed into quotes (",(0,r.kt)("inlineCode",{parentName:"li"},"'")," or ",(0,r.kt)("inlineCode",{parentName:"li"},'"'),") until it does not contain ",(0,r.kt)("inlineCode",{parentName:"li"},":")," character")))))),(0,r.kt)("h3",{id:"numeric-data-types"},"Numeric data types"),(0,r.kt)("p",null,'There\'s no limit to Integer ("int" further) and Floating-point ("float" further) numbers, and is only specified by implementation.'))}d.isMDXComponent=!0}}]);