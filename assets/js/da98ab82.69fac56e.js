"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[9073],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),l=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=l(r),d=o,f=m["".concat(c,".").concat(d)]||m[d]||p[d]||a;return r?n.createElement(f,s(s({ref:t},u),{},{components:r})):n.createElement(f,s({ref:t},u))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,s=new Array(a);s[0]=m;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var l=2;l<a;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},46636:function(e,t,r){r.r(t),r.d(t,{frontMatter:function(){return i},contentTitle:function(){return c},metadata:function(){return l},toc:function(){return u},default:function(){return m}});var n=r(87462),o=r(63366),a=(r(67294),r(3905)),s=["components"],i={},c="Operator-Constructors",l={unversionedId:"particles/operator-constructors",id:"particles/operator-constructors",isDocsHomePage:!1,title:"Operator-Constructors",description:"This feature is mostly a syntactic sugar rather than something really helpful, anyway, I want to save it here.",source:"@site/docs/particles/operator-constructors.md",sourceDirName:"particles",slug:"/particles/operator-constructors",permalink:"/dev-book/docs/particles/operator-constructors",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/particles/operator-constructors.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Null coalesce",permalink:"/dev-book/docs/particles/null-coalesce"},next:{title:"Optional Chaining and the Try operator",permalink:"/dev-book/docs/particles/optional-chaining-&-try"}},u=[{value:"The syntax",id:"the-syntax",children:[],level:2}],p={toc:u};function m(e){var t=e.components,r=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"operator-constructors"},"Operator-Constructors"),(0,a.kt)("p",null,"This feature is mostly a syntactic sugar rather than something really helpful, anyway, I want to save it here.\nIt also requires variadic arguments, thus it cannot implemented in first versions."),(0,a.kt)("h2",{id:"the-syntax"},"The syntax"),(0,a.kt)("p",null,"Operator-constructors are syntactic feature, i.e. we only affect parsing stage (but name resolution stage requires some changes too)."),(0,a.kt)("p",null,"What operator-constructors could solve is to avoid usage of macros to simply create some collection.\nIn Rust, to easily make a vector you use ",(0,a.kt)("inlineCode",{parentName:"p"},"vec!")," macro, which is expanded to ",(0,a.kt)("inlineCode",{parentName:"p"},"std::Vec")," construction and sequence of ",(0,a.kt)("inlineCode",{parentName:"p"},"push")," calls.\nMaybe I've already said it somewhere here -- I like macros but I want to get rid of them as much as possible to not require user to use them everywhere. Then, how does user make a vector easily without macros?\nMany languages have special syntaxes for sequences, e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"@")," in Nim, but this ",(0,a.kt)("inlineCode",{parentName:"p"},"@")," is an operator, and as I know it's just overloaded for strings and arrays in Nim. This is not actually what I want as it is array/string to sequence conversion instead of {some collection} constructor."))}m.isMDXComponent=!0}}]);