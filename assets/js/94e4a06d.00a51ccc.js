"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[1726],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return f}});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},s=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),m=u(n),f=o,d=m["".concat(c,".").concat(f)]||m[f]||p[f]||i;return n?r.createElement(d,a(a({ref:t},s),{},{components:n})):r.createElement(d,a({ref:t},s))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var u=2;u<i;u++)a[u]=n[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},71629:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return u},toc:function(){return s},default:function(){return m}});var r=n(87462),o=n(63366),i=(n(67294),n(3905)),a=["components"],l={},c="Compiler FAQ",u={unversionedId:"compiler-faq",id:"compiler-faq",isDocsHomePage:!1,title:"Compiler FAQ",description:"When I'm reading about different programming languages internals one problem comes up to me -- I cannot easily find an explanation for a tricky question (sometimes even for a really simple question), thus I thought it would be could to write a large list of a bunch of answers to anything about everything. This one is all about the compiler internals, I'll make one more about language itself when (or likely \"if\") it will be released.",source:"@site/docs/compiler-faq.md",sourceDirName:".",slug:"/compiler-faq",permalink:"/dev-book/docs/compiler-faq",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/compiler-faq.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Specification",permalink:"/dev-book/docs/jon/spec"}},s=[{value:"HIR",id:"hir",children:[{value:"HIR Structure",id:"hir-structure",children:[{value:"1. Why HIR does not have <code>ParenExpr</code>?",id:"1-why-hir-does-not-have-parenexpr",children:[],level:4}],level:3}],level:2}],p={toc:s};function m(e){var t=e.components,n=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"compiler-faq"},"Compiler FAQ"),(0,i.kt)("p",null,"When I'm reading about different programming languages internals one problem comes up to me -- I cannot easily find an explanation for a tricky question (sometimes even for a really simple question), thus I thought it would be could to write a large list of a bunch of answers to anything about everything. This one is all about the compiler internals, I'll make one more about language itself when (or likely \"if\") it will be released."),(0,i.kt)("blockquote",null,(0,i.kt)("h2",{parentName:"blockquote",id:"some-kind-of-rules-for-this-faq"},"Some kind of rules for this FAQ"),(0,i.kt)("ol",{parentName:"blockquote"},(0,i.kt)("li",{parentName:"ol"},"When someone anywhere comes up with a question about ",(0,i.kt)("em",{parentName:"li"},"Jacy"),", this information should be used to either add a new question-answer or to supplement the existing one."),(0,i.kt)("li",{parentName:"ol"},"Use hashtags, concise and meaningful."),(0,i.kt)("li",{parentName:"ol"},"Split FAQs into sections: large and specific"),(0,i.kt)("li",{parentName:"ol"},"Enumerate FAQs independently, i.e. each FAQ has its number without relation to a section."))),(0,i.kt)("h2",{id:"hir"},"HIR"),(0,i.kt)("h3",{id:"hir-structure"},"HIR Structure"),(0,i.kt)("h4",{id:"1-why-hir-does-not-have-parenexpr"},"1. Why HIR does not have ",(0,i.kt)("inlineCode",{parentName:"h4"},"ParenExpr"),"?"),(0,i.kt)("p",null,"#hir"),(0,i.kt)("p",null,"The reason is simple -- HIR tree already defines the precedence: ",(0,i.kt)("inlineCode",{parentName:"p"},"(1 + 2) * 3")," becomes ",(0,i.kt)("inlineCode",{parentName:"p"},"Infix(Infix(1 + 2), '*', Literal(3))")," and we don't need ",(0,i.kt)("inlineCode",{parentName:"p"},"ParenExpr")," to know that ",(0,i.kt)("inlineCode",{parentName:"p"},"(1 + 2)")," has higher precedence."))}m.isMDXComponent=!0}}]);