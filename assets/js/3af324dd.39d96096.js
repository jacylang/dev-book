"use strict";(self.webpackChunkdev_book=self.webpackChunkdev_book||[]).push([[1733],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),m=p(n),f=a,d=m["".concat(c,".").concat(f)]||m[f]||s[f]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},49902:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return u},default:function(){return m}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={sidebar_position:1,title:"Specification"},c="_JON_ Specificiation",p={unversionedId:"jon/spec",id:"jon/spec",isDocsHomePage:!1,title:"Specification",description:"JON is an alternative to JSON I've made for Jacy.",source:"@site/docs/jon/spec.md",sourceDirName:"jon",slug:"/jon/spec",permalink:"/dev-book/docs/jon/spec",editUrl:"https://github.com/jacylang/dev-book/edit/master/docs/jon/spec.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Specification"},sidebar:"tutorialSidebar",previous:{title:"Intro",permalink:"/dev-book/docs/appendices/spec/intro"},next:{title:"Compiler FAQ",permalink:"/dev-book/docs/compiler-faq"}},u=[{value:"Why <em>JON</em>?",id:"why-jon",children:[],level:2},{value:"Grammar",id:"grammar",children:[],level:2}],s={toc:u};function m(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"jon-specificiation"},(0,o.kt)("em",{parentName:"h1"},"JON")," Specificiation"),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"JON")," is an alternative to JSON I've made for ",(0,o.kt)("em",{parentName:"p"},"Jacy"),'.\nThough this page is called "Specification", better think of it as of grammar description.'),(0,o.kt)("h2",{id:"why-jon"},"Why ",(0,o.kt)("em",{parentName:"h2"},"JON"),"?"),(0,o.kt)("p",null,'Spoiler: No clear reasons, I just like create "my" things.'),(0,o.kt)("p",null,"JSON is a very popular format used mostly everywhere, so why do we need a different format?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"It is more liberal than JSON but still obvious and simple"),(0,o.kt)("li",{parentName:"ul"},"It is more human friendly but not that hard as YAML"),(0,o.kt)("li",{parentName:"ul"},"It is more complex than JSON, in a good way \ud83d\ude07")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"JON")," was also made as an alternative to TOML, as ",(0,o.kt)("em",{parentName:"p"},"Jacy")," is similar to ",(0,o.kt)("strong",{parentName:"p"},"Rust")," that uses TOML.\nI really don't like TOML \ud83d\ude10."),(0,o.kt)("h2",{id:"grammar"},"Grammar"),(0,o.kt)("p",null,"Here, I'll use ANTLR4-like grammar as it is more readable than EBNF."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-g4"},"grammar: JON;\n\nsep: '\\n'+ | '\\n'* ',' '\\n'*;\n\nroot: object_body | value;\n\nkey: literal;\n\nvalue: ;\n\nliteral\n    : STRING\n    | 'null'\n    | int\n    | float\n    | bool;\n\nkey_value: key ':' value;\n\nobject_body: value (sep key_value)* sep?;\nobject: '{' object_body? '}';\n\nfragment STRING\n    : '\\'' (~['\\\\\\u0000-\\u001F] | STR_ESC | ('\\\\\\'')) '\\''\n    | '\\'' (~[\"\\\\\\u0000-\\u001F] | STR_ESC | ('\\\\\\'')) '\\'';\n\nfragment STR_ESC: '\\\\' ([\\\\/bnfrt]);\n\nfragment INT: [0-9]+;\n\nWS: [ \\t\\r]+ -> skip;\n")))}m.isMDXComponent=!0}}]);